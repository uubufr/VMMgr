#! /bin/bash
#
# script name: VMMgr_Launcher
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.04
# description: VMMgr_Launcher allow start/stop/create/destroy Virtual Machines


# ToDo: on doit vérifier si un bridge n'a plus de slave, on le delete.
# Quid d'iptables
# Gestion des migrations?
# delete doit avoir l'option --data pour delete les disques
# Table pour gérer les disques et les déplacer?
# fonction connect pour lancer spice,qmp et telnet.
#
# Versionning:
# Les version 0.xx sont pour les branches d'ajoute de fonctionnalité post 2.0
# Les version 1.xx sont les releases dont on a ajouté une fonctionnalité validée
# La Version 2.0 sera une version pleinement fonctionnelle
#
# STEP:
# 0.05 on doit valider la fonction create: c'est à dire
# 1 Une fonction qui recherche la VM dans la DB, on initialise la DB si c'est pas le cas.
# 2 on doit créer un fichier de config VM à partir d'un template, remplacer les variables
#
# 0.06 on doit valider la fonction start: c'est à dire
# 1. on doit valider que la vm existe dans la DB, pas d'initialisation de DB
# 2. valider que la config existe, pas de création
# 3. Créer les disques nécessaire, valider l'espace disque restant avant
# 4. Démarrer la VM
#
# 0.07 On doit valider la fonction check: vérifier l'installation des paquets avec rpm. Si rpm n'existe pas, afficher simplement la liste des programmes à installer.
#
# 0.08 on doit valider la fonction de création manuelle de disques
#
# 0.09 fonction stop
# 0.10 fontion delete
# 0.11 fonction status/kill/reset
# 0.12 funtion ipmi
# 0.13 Spice/telnet/qmp
# 0.14 vnc
# 0.15 templates linux + Windows
# 0.16 les units systemd (pour la vm, pour ipmi etc.)
# 0.17 Gestion des groupes



# on charge les variables et paths nécessaire à l'exécution du script
if [ -x /usr/local/etc/VMMgr_.conf ]; then
 . /usr/local/etc/VMMgr_.conf
elif [ -x $(dirname $0)/VMMgr_.conf ]; then
 . $(dirname $0)/VMMgr_.conf
else
 echo "No config VMMgr_.conf found, abording..."
 return
fi


case "$1" in
    "check")
        # on doit vérifier que tous les outils sont installés et au bon endroit, sinon prévenir
        ;;
    "create")
            # Args:
            #   $2: Vm Name
            #   $3: Template Name
            if [ ! "$2" ] OR [ ! "$3" ] then echo "Usage $0 <vm name> <template>"; break; fi
            if [ ! -r $VMMGR_DATA_PATH/Templates/$3 ]; then echo "Error, template $VMMGR_DATA_PATH/Templates/$3 doesn't exists"; break; fi
            VMCONF=$(Check_Existing_VM $2)
            if [ -r $VMMGR_CONFIG_PATH/VM_CONFIGS/$VMCONF ]; then 
             echo "Warning, config file $VMMGR_CONFIG_PATH/VM_CONFIGS/$VMCONF already exists"
            else
             cp $VMMGR_DATA_PATH/Templates/$3 $VMMGR_CONFIG_PATH/VM_CONFIGS/$2.conf
            fi
            Db_Create_VM $VMMGR_DB_PATH $1 $2.conf
             # on remplace les valeurs.
        ;;
    "delete")
        ;;
    "start")
        ;;
    "stop")
        ;;
    "group")
        ;;
    "status")
        ;;
    "kill")
        ;;
    "reset")
        ;;
    "ipmistart")
        ;;
    "ipmistop")
        ;;
    "ipmistatus")
        ;;
    "define")
        ;;
    "connect")
        case "$2" in
            "spice")
                remote-viewer $VMMgr_PATH/R-SPICE/s-$3
            ;;
            "telnet")
                telnet $(Db_Get_IPPORT $VMMgr_PATH $3 telnet | tr \| \  )
            ;;
            "qmp")
            ;;
        esac
        ;;
    *)
        ;;
esac
