#! /bin/bash
#
# script name: VMMgr_Launcher
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.04
# description: VMMgr_Launcher main entry for VM management


### except install and uninstall, we never run as root:
MYID=$(id -u)
RUNERROR=0
if [ "$MYID" == "0" ]; then
        if [ "$1" == "install" ] || [ "$1" == "uninstall" ]; then
                echo "${1^}ing VMMGR..."
        else
                echo "Error, except 'install' and 'uninstall' commands, I refuse to run as root."
                RUNERROR=1
        fi
else
        if [ "$1" == "install" ] || [ "$1" == "uninstall" ]; then
                echo "Error, '$1' commands need root privileges"
                RUNERROR=1
        fi
fi
if [ "$RUNERROR" == 1 ]; then
        exit -1
fi

if [ -r /etc/VMMGR/VMMgr_.conf ]; then
 . /etc/VMMGR/VMMgr_.conf
elif [ -r $(dirname $0)/VMMgr_.conf ]; then
 . $(dirname $0)/VMMgr_.conf
else
 echo "No config VMMgr_.conf found, abording..."
 exit -1
fi

# Loading Libs
if [ -r $VMMGR_LIB_PATH/VMMgr_Functions ]; then
    . $VMMGR_LIB_PATH/VMMgr_Db
    . $VMMGR_LIB_PATH/VMMgr_Functions
    . $VMMGR_LIB_PATH/VMMgr_Networks
    . $VMMGR_LIB_PATH/VMMgr_Disks
    . $VMMGR_LIB_PATH/VMMgr_CPUs
fi

case "$1" in
    "check")
        Check_Requirements
        Check_System
        ;;
    "install")
        . ./VMMgr_Libs/VMMgr_Functions
        Install_VMMGR
        ;;
    "uninstall")
        Uninstall_VMMGR
        ;;
    "create")
            # Args:
            #   $2: Vm Name
            #   $3: Template Name
            # Steps:
            #   1) Check Vars, template, if vm and config file already exists
            #   2) Declare VM in DB, copy template, and customize Vars
            if [ ! "$2" ] || [ ! "$3" ]; then
                echo "Usage $0 <vm name> <template>"
            elif [ "$(echo $2 | grep "-")" ]; then
                echo "Error, VM name contain '-' character, please use '_' or other char instead"
            elif [ ! -r $VMMGR_DATA_PATH/Templates/$3 ]; then
                echo "Error, template $VMMGR_DATA_PATH/Templates/$3 doesn't exists"
            else
                VMMGR_LOG "VMMGR" "CREATE" "Creating vm with name: $2 from template $3"
                VMCONF=$(Check_Existing_VM $2)
                if [ "$VMCONF" == "" ]; then VMCONF="$2.conf"; fi
                if [ -r $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF ]; then 
                    echo "Warning, config file $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF already exists"
                    VMMGR_LOG "VMMGR" "CREATE" "Error, config for $2 already exists"
                else
                    cp $VMMGR_DATA_PATH/Templates/$3 $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF
                    Custom_VM_Config $2 $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF
                fi
                GROUP=$(cat $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF | grep "^GROUP=" | cut -d\" -f2)
                VMMGR_LOG "VMMGR" "CREATE" "Setting group: $GROUP for new vm: $2"
                VMID=$(Db_Create_VM $VMMGR_DB_PATH $2 $VMCONF $(cat /proc/sys/kernel/random/uuid) $GROUP)
                Db_Set_Group $VMMGR_DB_PATH $2 $GROUP
            fi
        ;;
    "delete")
        VMMGR_LOG "$2" "DELETE" "Deleting vm $2"
        if [ ! "$2" ]; then
            echo "Usage $0 delete <vm name> [disks[-conf[-db]]]"
        else
            VMCONF=$(Db_Get_VM_Config $VMMGR_DB_PATH $2)
            if [ "$VMCONF" == "" ]; then
                echo "VM $2 not found in DB $VMCONF"
            else
                VM_Delete $2 $VMCONF $3
            fi
        fi
        ;;
    "start")
            if [ ! "$2" ]; then
                echo "Usage $0 start <vm name>"
            elif [ "$3" == "regen" ]; then
                VMCONF=$(Db_Get_VM_Config $VMMGR_DB_PATH $2)
                if [ ! -r $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF ]; then
                    echo "VM $2 not found"
                else
                    Start_VM_From_Config $2 $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF
                fi
            elif [ -r /etc/systemd/system/$2 ]; then
                systemctl start $2
            else
                VMCONF=$(Db_Get_VM_Config $VMMGR_DB_PATH $2)
                if  [ "$VMCONF" == "" ]; then
                    echo "$2 not found in DB"
                else
                    . $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF
                    if  [ -r "$VMMGR_DATA_PATH/QEMU_CONFIGS/$2" ] && [ "$USEQEMUCONFIG" != "no" ]; then
                        DISPLAY=$(grep "^# display " $VMMGR_DATA_PATH/QEMU_CONFIGS/$2 | awk '{print $3}' )
                        if [ "$DISPLAY" ]; then ADDED="-display $DISPLAY "; fi
                        SOUND=$(grep "^# soundhw " $VMMGR_DATA_PATH/QEMU_CONFIGS/$2 | awk '{print $3}' )
                        if [ "$SOUND" ]; then ADDED="$ADDED -soundhw $SOUND "; fi
                        CPU=$(grep "^# cpu " $VMMGR_DATA_PATH/QEMU_CONFIGS/$2 | awk '{print $3}' )
                        if [ "$CPU" ]; then ADDED="$ADDED -cpu $CPU "; fi
                        VMMGR_LOG "VMMGR" "START" "Starting $2 using qemu-config"
                        qemu-system-x86_64 -daemonize -pidfile /run/VMMGR/$NAME --uuid $(Get_Db_UUID $VMMGR_DB_PATH $2) $ADDED -no-user-config -nodefaults -readconfig $VMMGR_DATA_PATH/QEMU_CONFIGS/$2
                        VMMGR_LOG "$2" "START" "Starting $2 using qemu config"
                    else
                         if [ ! -r $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF ]; then
                            echo "VM $2 not found"
                        else
                            Start_VM_From_Config $2 $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF
                        fi
                    fi
                fi
            fi
        ;;
    "enable")
        VMMGR_LOG "$2" "ENABLE" "Enabling $2.service"
        Customize_Unit $2 $VMMGR_DATA_PATH/VM_CONFIGS/$(Db_Get_VM_Config $VMMGR_DB_PATH $2)
        UNITEXIST=$(systemctl list-unit-files $2.service | grep 1)
        if [ "$UNITEXIST" ]; then
            UNITPATH=$(systemctl status $2.service | grep "Loaded:" | cut -d\( -f2 ); UNITPATH="${UNITPATH%%.service*}.service"
            if [ "$(sha1sum $VMMGR_DATA_PATH/UNITS/$2.service | awk '{print $1}')" == "$(sha1sum $UNITPATH | awk '{print $1}')" ]; then
                echo "VM $2 already enabled"
            else
                sudo systemctl disable $2
                sudo cp $VMMGR_DATA_PATH/UNITS/$2.service /etc/systemd/system/$2.service
                sudo chmod 744 /etc/systemd/system/$2.service
                sudo systemctl daemon-reload
            fi
        else
            sudo cp $VMMGR_DATA_PATH/UNITS/$2.service /etc/systemd/system/$2.service
            sudo systemctl daemon-reload
        fi
        sudo systemctl enable $2
        Db_Enable_VM $VMMGR_DB_PATH $2
        ;;
    "disable")
        VMMGR_LOG "$2" "DISABLE" "disabling $2.service"
        sudo systemctl disable $2
        Db_Disable_VM $VMMGR_DB_PATH $2
        ;;
    "stop")
        VMMGR_LOG "$2" "STOP" "Stopping vm $2"
        if [ "$(systemctl is-active $2)" == "active" ]; then
            systemctl stop $2
        else
            VMCONF=$(Db_Get_VM_Config $VMMGR_DB_PATH $2)
            if [ "$VMCONF" == "" ]; then
                echo "$2 not found in DB"
            else
                . $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF
                if [ "$TELNET" == "on" ]; then
                    IPPORT=$(Set_Service_Listen $TELNETIP $TELNETIPVER $TELNETTYPE $NAME telnet $TELNETPORT)
                    { echo "system_powerdown"; sleep 1; } | telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
                elif [ "$QMP" == "on" ]; then
                    IPPORT=$(Set_Service_Listen $QMPIP $QMPIPVER $QMPTYPE $NAME qmp $QMPPORT)
                    { echo  { echo '{ "execute": "qmp_capabilities" } { "execute": "system_powerdown" } { "execute": "quit" }'; sleep 1; } | telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
                fi
            fi
        fi
        ;;
    "group")
            Manage_Group $2 $3 $4
        ;;
    "status")
         VMCONF=$(Db_Get_VM_Config $VMMGR_DB_PATH $2)
        if [ "$VMCONF" == "" ]; then
            echo "$2 not found in DB"
        else
            . $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF
            if [ "$TELNET" == "on" ]; then
                IPPORT=$(Set_Service_Listen $TELNETIP $TELNETIPVER $TELNETTYPE $NAME telnet $TELNETPORT)
                { echo "info status"; sleep 1; } | telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
            elif [ "$QMP" == "on" ]; then
                IPPORT=$(Set_Service_Listen $QMPIP $QMPIPVER $QMPTYPE $NAME qmp $QMPPORT)
                { echo '{ "execute": "qmp_capabilities" } { "execute": "query-status" }'; sleep 1; } | telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
            fi
        fi
        ;;
    "kill")
        VMMGR_LOG "$2" "KILL" "killing VM $2"
        VMCONF=$(Db_Get_VM_Config $VMMGR_DB_PATH $2)
        if [ "$VMCONF" == "" ]; then
            echo "$2 not found in DB"
        else
            . $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF
            if [ "$TELNET" == "on" ]; then
                IPPORT=$(Set_Service_Listen $TELNETIP $TELNETIPVER $TELNETTYPE $NAME telnet $TELNETPORT)
                { echo "quit"; sleep 1; } | telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
            elif [ "$QMP" == "on" ]; then
                IPPORT=$(Set_Service_Listen $QMPIP $QMPIPVER $QMPTYPE $NAME qmp $QMPPORT)
                { echo  { echo '{ "execute": "qmp_capabilities" } { "execute": "quit" }'; sleep 1; } | telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
            fi
        fi
        ;;
    "reset")
        VMMGR_LOG "$2" "RESET" "VM Hard Reset"
        VMCONF=$(Db_Get_VM_Config $VMMGR_DB_PATH $2)
        if [ "$VMCONF" == "" ]; then
            echo "$2 not found in DB"
        else
            . $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF
            if [ "$TELNET" == "on" ]; then
                IPPORT=$(Set_Service_Listen $TELNETIP $TELNETIPVER $TELNETTYPE $NAME telnet $TELNETPORT)
                { echo "system_reset"; sleep 1; } | telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
            elif [ "$QMP" == "on" ]; then
                IPPORT=$(Set_Service_Listen $QMPIP $QMPIPVER $QMPTYPE $NAME qmp $QMPPORT)
                { echo  { echo '{ "execute": "qmp_capabilities" } { "execute": "system_reset" } { "execute": "quit" }'; sleep 1; } | telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
            fi
        fi
        ;;
    "ipmistart")
        ;;
    "ipmistop")
        ;;
    "ipmistatus")
        ;;
    "db")
        VM_DB_Manage $2 $3
        ;;
    "connect")
        VMCONF=$(Db_Get_VM_Config $VMMGR_DB_PATH $2)
        if [ "$VMCONF" == "" ]; then
            echo "$2 not found in DB"
        else
            . $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF
            case "$3" in
                "spice")
                        nohup remote-viewer $VMMGR_DATA_PATH/R-SPICE/$2 &
                ;;
                "telnet")
                    IPPORT=$(Set_Service_Listen $TELNETIP $TELNETIPVER $TELNETTYPE $NAME telnet $TELNETPORT)
                    telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
                ;;
                "qmp")
                    IPPORT=$(Set_Service_Listen $QMPIP $QMPIPVER $QMPTYPE $NAME qmp $QMPPORT)
                    telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
                ;;
                "vnc")
                    nohup remote-viewer $VMMGR_DATA_PATH/R-VNC/$2 &
                ;;
            esac
        fi
        ;;
    "load")
        VMMGR_LOG $2 "DVD change" "Trying to load $3 into DVD drive"
        VMCONF=$(Db_Get_VM_Config $VMMGR_DB_PATH $2)
        if [ "$VMCONF" == "" ]; then
            echo "$2 not found in DB"
        else
            if [ "$3" ]; then
                case "$3" in
                    "virtiowin")
                        ISO=$VMMGR_ISO_PATH/virtio-win.iso
                    ;;
                    *)
                        if [ -f "$3" ]; then
                            ISO=$3
                        elif [ -f "$VMMGR_ISO_PATH/$3" ]; then
                            ISO="$VMMGR_ISO_PATH/$3"
                        fi
                        if [ "${3#http}" != $3 ]; then
                            ISO=$3
                        fi
                    ;;
                esac
                . $VMMGR_DATA_PATH/VM_CONFIGS/$VMCONF
                if [ "$TELNET" == "on" ]; then
                    IPPORT=$(Set_Service_Listen $TELNETIP $TELNETIPVER $TELNETTYPE $NAME telnet $TELNETPORT)
                    { echo "change DVD $ISO"; sleep 1; } | telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
                    if [ "$4" == "reset" ]; then
                        { echo "system_reset"; sleep 1; } | telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
                    fi
                elif [ "$QMP" == "on" ]; then
                    IPPORT=$(Set_Service_Listen $QMPIP $QMPIPVER $QMPTYPE $NAME qmp $QMPPORT)
                    { echo '{ "execute": "qmp_capabilities" } { "execute": "change DVD $ISO" }'; sleep 1; } | telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
                    if [ "$4" == "reset" ]; then
                        { echo  { echo '{ "execute": "qmp_capabilities" } { "execute": "system_reset" } { "execute": "quit" }'; sleep 1; } | telnet $(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}') ${IPPORT#*|}
                    fi
                fi
            fi
        fi
        ;;
    "list")
        List_All_VM $2
        ;;
     "wintools")
        VMMGR_LOG "VMMGR" "WINTOOLS" "Downloading wintools..."
        ### Virtio Win
        wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso --directory-prefix=$VMMGR_ISO_PATH/
        ### QEMU Guest Agent
        wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-qemu-ga/qemu-ga-win-100.0.0.0-3.el7ev/qemu-ga-x64.msi --directory-prefix=$VMMGR_ISO_PATH/
        ### Spice Guest Tools
        wget https://www.spice-space.org/download/windows/spice-guest-tools/spice-guest-tools-latest.exe --directory-prefix=$VMMGR_ISO_PATH/
        ;;
    *)
        echo "Usage: VMMgr_Launcher <command> <options>
        install/uninstall: Install or uninstall on your system instead of running all in the current folder
        check: helper to allow you to configure correctly your system
        create <vm name> <template>: declare un new vm based on a template
        start <vm name> <regen>: Start you vm. regen bypass existing qemu-config and use you vm config
        stop <vm name>: stop the vm
        kill <vm name>: force stop vm
        reset <vm name>: reset vm
        status <vm name>: is the vm running?
        connect <vm name> <spice|vnc|telnet|qmp> connect to you vm
        load <vmname> <fullpath iso|rel to iso path|virtiowin> <reset>: load iso into DVD drive, optionally reset immediatly after
        wintools: download Windows drivers and tools in your iso path (actually: $VMMGR_ISO_PATH)
        enable: Install unit systemd and enable
        disable: Disable unit systemd
        delete: [disks[-conf[-db]]] delete VM
        group: <list|start|stop|enable|disable> group management
        list <all|running|stopped|enabled|disabled> list vms
        db <reconf|todb|import|export|list|purge>
        "
        ;;
esac

### Auto Backup DB ###
if [ "$1" == "install" ] || [ "$1" == "check" ]; then
    VMMGR_LOG "VMMGR" "SYSTEM" "action $1 done!"
else
    LATEST=""
    if [ -r $VMMGR_DATA_PATH/DB_BKP/*-DB.latest.bkp ]; then
        LATEST=$( ls $VMMGR_DATA_PATH/DB_BKP/*-DB.latest.bkp)
        if [ -r "$LATEST" ]; then
            if [ "$(sha1sum $LATEST | awk '{print $1}')" != "$(sha1sum $VMMGR_DB_PATH/VMMGR_.db | awk '{print $1}')" ]; then
                TARGET=$(basename $LATEST)
                mv $LATEST $VMMGR_DATA_PATH/DB_BKP/${TARGET%%.latest.bkp}.bkp
            fi
        fi
    fi
    if [ ! -r "$LATEST" ]; then
        cp $VMMGR_DB_PATH/VMMGR_.db $VMMGR_DATA_PATH/DB_BKP/$(date '+%Y-%m-%d_%H-%M-%S')-DB.latest.bkp;
        VMMGR_LOG "VMMGR" "DB" "changed, new DB Backup."
    fi
fi

### Recheck Perms ###
sudo chown -R qemu:qemu $VMMGR_DATA_PATH && sudo chmod -R 770 $VMMGR_DATA_PATH
