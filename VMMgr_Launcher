#! /bin/bash
#
# script name: VMMgr_Launcher
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.04
# description: VMMgr_Launcher allow start/stop/create/destroy Virtual Machines
#
# ToDo: on doit vérifier si un bridge n'a plus de slave, on le delete.
# Quid d'iptables
# Gestion des migrations?
# delete doit avoir l'option --data pour delete les disques
# Table pour gérer les disques et les déplacer?
# fonction connect pour lancer spice,qmp et telnet.
#
# Versionning:
# Les version 0.xx sont pour les branches d'ajoute de fonctionnalité post 2.0
# Les version 1.xx sont les releases dont on a ajouté une fonctionnalité validée
# La Version 2.0 sera une version pleinement fonctionnelle
#
# STEP:
# 0.06 on doit valider la fonction start: c'est à dire
# 1. on doit valider que la vm existe dans la DB, pas d'initialisation de DB
# 2. valider que la config existe, pas de création
# 3. Créer les disques nécessaire, valider l'espace disque restant avant
# 4. Démarrer la VM
#
# 0.07 On doit valider la fonction check: vérifier l'installation des paquets avec rpm. Si rpm n'existe pas, afficher simplement la liste des programmes à installer.
#
# 0.08 on doit valider la fonction de création manuelle de disques
#
# 0.09 fonction stop
# 0.10 fontion delete
# 0.11 fonction status/kill/reset
# 0.12 funtion ipmi
# 0.13 Spice/telnet/qmp
# 0.14 vnc
# 0.15 templates linux + Windows
# 0.16 les units systemd (pour la vm, pour ipmi etc.)
# 0.17 Gestion des groupes

# on charge les variables et paths nécessaire à l'exécution du script
if [ -r /usr/local/etc/VMMgr_.conf ]; then
 . /usr/local/etc/VMMgr_.conf
elif [ -r $(dirname $0)/VMMgr_.conf ]; then
 . $(dirname $0)/VMMgr_.conf
else
 echo "No config VMMgr_.conf found, abording..."
 return
fi

# Loading Libs
. $VMMGR_DATA_PATH/VMMgr_Libs/VMMgr_Db
. $VMMGR_DATA_PATH/VMMgr_Libs/VMMgr_Functions



case "$1" in
    "check")
        # on doit vérifier que tous les outils sont installés et au bon endroit, sinon prévenir
        ;;
    "create")
            # Args:
            #   $2: Vm Name
            #   $3: Template Name
            # Steps:
            #   1) Check Vars, template, if vm and config file already exists
            #   2) Declare VM in DB, copy template, and customize Vars
            if [ ! "$2" ] || [ ! "$3" ]; then
                echo "Usage $0 <vm name> <template>"
            else if [ ! -r $VMMGR_DATA_PATH/Templates/$3 ]; then
                echo "Error, template $VMMGR_DATA_PATH/Templates/$3 doesn't exists"
                 else
                    VMCONF=$(Check_Existing_VM $2)
                    if [ "$VMCONF" == "" ]; then VMCONF="$2.conf"; fi
                    if [ -r $VMMGR_CONFIG_PATH/VM_CONFIGS/$VMCONF ]; then 
                        echo "Warning, config file $VMMGR_CONFIG_PATH/VM_CONFIGS/$VMCONF already exists"
                    else
                        cp $VMMGR_DATA_PATH/Templates/$3 $VMMGR_CONFIG_PATH/VM_CONFIGS/$VMCONF
                        Custom_VM_Config $2 $VMMGR_CONFIG_PATH/VM_CONFIGS/$VMCONF
                    fi
                    VMID=$(Db_Create_VM $VMMGR_DB_PATH $2 $VMCONF)
                fi
            fi
        ;;
    "delete")
            # Args:
            #   $2: Vm Name
            #   $3: 'config' <optional>
            # Steps:
            #   1) Check if VM exists in DB
            #   2) Delete from DB
            #   3) Check $3 to know optional delete: config-file and/or disks
            # TODO: systemd files, besoin de disable avant????
            if [ ! "$2" ]; then
                echo "Usage $0 delete <vm name> [config|disks|conf-disks]"
            else
                VMCONF=$(Check_Existing_VM $2)
                if [ "$VMCONF" == "" ]; then
                    echo "VM $2 not found in DB"
                else
                    Db_Delete_VM $VMMGR_DB_PATH $2
                    if [ -r $VMMGR_CONFIG_PATH/VM_CONFIGS/$VMCONF ] && [ "$3" == "config" ]; then
                        rm $VMMGR_CONFIG_PATH/VM_CONFIGS/$VMCONF
                    fi
                fi
            fi
        ;;
    "start")
            if [ ! "$2" ]; then
                echo "Usage $0 start <vm name>"
            else
                VMCONF=$(Db_Get_VM_Config $VMMGR_DB_PATH $2)
                if [ "$VMCONF" == "" ]; then
                    echo "$2 not found in DB"
                else
                    if [ ! -r $VMMGR_CONFIG_PATH/VM_CONFIGS/$VMCONF ]; then
                        echo "VM $2 not found"
                    else
                        Start_VM_From_Config $2 $VMMGR_CONFIG_PATH/VM_CONFIGS/$VMCONF
                    fi
                fi
            fi
        ;;
    "stop")
        ;;
    "group")
        ;;
    "status")
        ;;
    "kill")
        ;;
    "reset")
        ;;
    "ipmistart")
        ;;
    "ipmistop")
        ;;
    "ipmistatus")
        ;;
    "define")
        ;;
    "connect")
        case "$2" in
            "spice")
                remote-viewer $VMMgr_PATH/R-SPICE/s-$3
            ;;
            "telnet")
                telnet $(Db_Get_IPPORT $VMMgr_PATH $3 telnet | tr \| \  )
            ;;
            "qmp")
            ;;
        esac
        ;;
    *)
        ;;
esac
