#! /bin/bash
#
# script name: VMMgr_Networks
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.0#
# description: Usefull Networks functions
#
# Functions:
# Get_Bridge_Tool: Try to detect best bridge tool available
# Set_Bridge_Brctl: Set bridges using brctl
# Set_Bridge_Ovs: Create bridge using openvswitch
# Set_Bridge_Nmcli: create bridge using nmcli
# Create_Bridge: create bridge dispatcher
# Set_MAC: Calculate MAC Address
# Set_New_Port: Get Port or generate new one
# Get_Next_IPv4: Generate new IP from a pool
# Get_Next_IPv6: Generate new IP from a pool
# Set_New_IP: Get IP or generate new one
# Create_Tap: Create Tap iface
# Enslave_Tap: enslave Tap to a bridge
# Set_Iface_Net: Set IP/Prefix to net device
# New_Network: create bridge or tap device

# Function Get_Bridge_Tool
# Description: Try to detect best bridge tool available
# Args: No Args
function Get_Bridge_Tool() {
    ip --version 2>/dev/null 1>/dev/null
    [ $? -eq 0 ] && BRIDGETOOL="ip"
    brctl --version 2>/dev/null 1>/dev/null
    [ $? -eq 0 ] && BRIDGETOOL="brctl"
    ovs-vsctl --version 2>/dev/null 1>/dev/null
    [ $? -eq 0 ] && BRIDGETOOL="ovs"
    nmcli --version 2>/dev/null 1>/dev/null
    [ $? -eq 0 ] && BRIDGETOOL="nmcli"
    BRIDGETOOL="brctl"
    export BRIDGETOOL
}

# Function: Set_Bridge_Brctl
# Description: Set bridges using brctl
# Args:
#   $1: bridge name
#   $2: on: up the interface
function Set_Bridge_Brctl() {
    ip address show $1 2> /dev/null 1> /dev/null
    if [ $? -ne 0 ]; then
        sudo ip link add name $1 type bridge
        sudo ip link set dev $1 up
    fi
    if [ "$2" == "on" ]; then
        sudo ip link set dev $1 up
    fi
}

# function: Set_Bridge_Ovs
# Description: Create bridge using openvswitch
# Args:
#   $1: Bridge name
#   $2: on: up the interface
function Set_Bridge_Ovs() {
    if [ "$(sudo ovs-vsctl list-br | grep $1)" == "" ]; then
        sudo ovs-vsctl add-br $1
    fi
    if [ "$2" == "on" ]; then
        sudo ip link set dev $1 up
    fi
}

# function: Set_Bridge_Nmcli
# Description: create bridge using nmcli
# Args:
#   $1: Bridge name
#   $2: on: up the interface
function Set_Bridge_Nmcli() {
    nmcli dev show $1 2>/dev/null 1>/dev/null
    if [ $? -ne 0 ]; then
        sudo nmcli con add save yes type bridge ifname $1
        sudo nmcli con mod bridge-$1 connection.id $1
        sudo nmcli dev set $1 autoconnect yes managed yes 
        sudo nmcli con mod $1 ipv4.method disabled
        sudo nmcli con mod $1 ipv6.method ignore
        sudo nmcli con up $1
    fi
    if [ "$2" == "on" ]; then
        sudo nmcli dev connect $1
        sudo nmcli dev reapply $1
    fi
}

# Function: Create_Bridge
# Description: create bridge dispatcher
# $1: Bridge Name
# $2: Bridge Tool
function Create_Bridge() {
[ "$2" ] || Set_Bridge_Ip $1 on
        case "$2" in
            "ip")
                Set_Bridge_Ip $1 on
            ;;
            "brctl")
                Set_Bridge_Brctl $1 on
            ;;
            "ovs")
                Set_Bridge_Ovs $1 on
            ;;
            "nmcli")
                Set_Bridge_Nmcli $1 on
            ;;
        esac
}


# Function: Set_MAC
# Description: Calculate MAC Address
# Args:
#   $1: Vm Name
#   $2: network device number
function Set_MAC() {
        OUI="52:54:00"
        SUBMAC=$(Db_Set_MAC $VMMGR_DB_PATH $1 $2)
        echo $OUI:${SUBMAC:0:2}:${SUBMAC:2:2}:${SUBMAC:4:2}
}

# Function: Set_New_Port
# Description: Get Port or generate new one
# Args:
#   $1: Vm Name
#   $2: Type [spice|telnet|qmp|vnc]
#   $3: min port
#   $4: max port
# Return: Port number
function Set_New_Port() {
    EXISTS=$(Db_Get_IPPORT $VMMGR_DB_PATH $1 $2)
    if [ "$EXISTS" == "" ]; then
        for PORT in $(seq $3 $4); do
            EXISTS=$(Db_Search_PORT $VMMGR_DB_PATH $2 $PORT)
            if [ "$EXISTS" == "" ]; then
                EXISTS="undefined|"$PORT
                break;
            fi
        done
    fi
    echo $EXISTS | cut -d\|  -f2
}

# Function Set_Port_Listen
# Description: get port for service
# Args:
#    $1: VM name
#    $2: Type [spice|telnet|qmp|vnc]
# Return Port number
function Set_Port_Listen() {
    case "$2" in
        "spice")
            PMIN=$SPICEMINPORT
            PMAX=$SPICEMAXPORT
        ;;
        "telnet")
            PMIN=$TELNETMINPORT
            PMAX=$TELNETMAXPORT
        ;;
        "qmp")
            PMIN=$QMPMINPORT
            PMAX=$QMPMAXPORT
        ;;
        "vnc")
            PMIN=$VNCMINPORT
            PMAX=$VNCMAXPORT
        ;;
    esac
    Set_New_Port $1 $2 $PMIN $PMAX
}

# Function: Get_Next_IPv4
# Description: Generate new IP from a pool
# Args:
#   $1: Network
# Steps:
#   1) Get Last used IP, add 1
#   2) Get Max IP
#   3) Ensure Next IP is not after Max IP
function Get_Next_IPv4() {
    IFS=\| read -r IPNETWORK IPPREFIX MIN MAX LAST BR BRIP <<< $(echo "$1")
    IFS=. read -r i1 i2 i3 i4 <<< $(echo $LAST)
    printf -v LastIP '%02x' $i1 $i2 $i3 $i4
    NextIP=$(echo "obase=16;ibase=16; ${LastIP^^} + 1" | bc)
    printf -v NextIP '%08x' 0x$NextIP
    
    IFS=. read -r i1 i2 i3 i4 <<< $(echo $MAX)
    printf -v MaxIP '%02x' $i1 $i2 $i3 $i4
    MaxIP=${MaxIP^^}; NextIP=${NextIP^^}
    if [ $(echo "obase=10;ibase=16; $NextIP" | bc) -le $(echo "obase=10;ibase=16; $MaxIP" | bc) ]; then
        echo $(echo "ibase=16;obase=A;${NextIP:0:2}" | bc).$(echo "ibase=16;obase=A;${NextIP:2:2}" | bc).$(echo "ibase=16;obase=A;${NextIP:4:2}" | bc).$(echo "ibase=16;obase=A;${NextIP:6:2}" | bc)
    fi
}

# Function: Get_Next_IPv6
# Description: Generate new IP from a pool
# Args:
#   $1: Network
# Steps:
#   1) extract Network values
#   2) get full lengh IPv6
#   3) Calculate next IP
#   4) Check if we are not out of pool (I know, useless...)
function Get_Next_IPv6() {

    IFS=\| read -r IPNETWORK IPPREFIX MIN MAX LAST BR BRIP <<< $(echo "$1")
    LastIP=$(ipcalc -6 $LAST --info | grep "Full Address" | awk '{print $3}' | cut -d/  -f1 | tr -d : )
    
    NextIP=$(echo "obase=16;ibase=16; ${LastIP^^} + 1" | bc)
    
    MaxIP=$(ipcalc -6 $MAX --info | grep "Full Address" | awk '{print $3}' | cut -d/  -f1 | tr -d : )
    MaxIP=${MaxIP^^}; NextIP=${NextIP^^}
    if [ "$(echo "obase=16;ibase=16; ${MaxIP^^} > ${NextIP^^}" | bc)" == "1" ]; then
        echo ${NextIP:0:4}:${NextIP:4:4}:${NextIP:8:4}:${NextIP:12:4}:${NextIP:16:4}:${NextIP:20:4}:${NextIP:24:4}:${NextIP:28:4}
    fi
}

# Function: Set_New_IP
# Description: Get IP or generate new one
#   $1: Vm Name
#   $2: Type [spice|telnet|qmp|vnc]
#   $3: Network
#   $4: IPVER
function Set_New_IP() {
    EXISTS=$(Db_Get_IPPORT $VMMGR_DB_PATH $1 $2)
    if [ "$EXISTS" == "" ]; then
        EXISTS=$(Db_Get_Network $VMMGR_DB_PATH $3)
        if [ "$EXISTS" != "" ]; then
            [ "${4^^}" == "4" ] && EXISTS=$(Get_Next_IPv4 "$EXISTS")
            [ "${4^^}" == "6" ] && EXISTS=$(Get_Next_IPv6 "$EXISTS")
        fi
    fi
    if [ "$EXISTS" ]; then
        Db_Update_Net_NextIP $VMMGR_DB_PATH $3 ${EXISTS%|*}
    fi
    echo $EXISTS | cut -d\|  -f1
}

# Function: Create_Tap
# Description: Create Tap iface
# Args:
#   $1: tap name
function Create_Tap() {
    sudo ip tuntap add mode tap $1
    sudo ip link set dev $1 up
}

# Function: Enslave_Tap
# Description: enslave Tap to a bridge
# Args:
# $1: tap name
# $2: Bridge Name
# $3: Bridge Tool
function Enslave_Tap() {
        if [ "$(ip -br a s $2 | awk '{print $2}')" == "DOWN" ]; then
            sudo ip link set dev $2 up
        fi
        case "$3" in
            "brctl")
                sudo brctl addif $2 $1
            ;;
            "ovs")
                sudo ovs-vsctl add-port $2 $1
            ;;
            "nmcli")
                sudo nmcli con add type bridge-slave ifname $1 master $2
                sudo brctl addif $2 $1
            ;;
        esac
}

# Function: Set_Iface_Net
# Description: Set IP/Prefix to net device
# Args:
#   $1: IP
#   $2: Prefix
#   $3: Iface
function Set_Iface_Net() {
    sudo ip address add $1/$2 dev $3
    sudo ip link set dev $3 up
}

# Function: Create_New_Network
# Description: Declare New Network in DB
# Args:
#   $1: Iface Name
#   $2: Network IP
#   $3: Prefix
#   $4: First IP available -1
#   $5: Last IP available
#   $6: Type (bridge or tap)
function Create_New_Network() {
    Db_Create_Network $VMMGR_DB_PATH $2 $3 $4 $5 $1
}

# Function: New_Network
# Description: create bridge or tap device
# Args:
#   $1: Device Name
#   $2: <ipversion>|<IP>|<prefix>
#   $3: <MINIP>|<MAXIP>
#   $4: (optional) if $3 is set only: default IP for this bridge
function New_Network() {
    IFS=\| read -r IPVER IPNETWORK IPPREFIX <<< $(echo "$2")
    DBNET=$(Db_Get_Network $VMMGR_DB_PATH $1)
    if [ "$DBNET" == "" ]; then
        Db_Create_Network $VMMGR_DB_PATH $IPNETWORK $IPPREFIX ${3%|*} ${3#*|} $1
        if [ "$4" != "" ]; then
            Db_Set_Network_IP $VMMGR_DB_PATH $1 $4
        fi
        DBNET=$(Db_Get_Network $VMMGR_DB_PATH $1)
    fi
        IFS=\| read -r DBIP DBPFX DBMIN DBMAX DBLAST DBIFACE <<< $(echo $DBNET)
    ip -br address show type bridge $1 2>/dev/null 1>/dev/null
    if [ $? -ne 0 ]; then
        [ "$BRIDGETOOL" ] || Get_Bridge_Tool
        Create_Bridge $1 $BRIDGETOOL
    fi
    if [ "$4" != "" ]; then
        ip -br address show type bridge $1 | grep $4 2>/dev/null 1>/dev/null
        if [ $? -ne 0 ]; then
            Set_Iface_Net $4 $DBPFX $1
        fi
    fi
}

function New_Tap() {
    sudo ip tuntap add mode tap $1
}

# Function: Set_Service_Listen
# Description: Set IP and Port for Spice
# Args:
#   $1: IP or Iface name
#   $2: $IPVER
#   $3: Iface type (tun or bridge)
#   $4: VM Name
#   $5: Service Name ( spice, telnet, qmp, vnc)
#   $6: PORT
### TODO:
#           Revoir les fonciton Set_Iface_Net
#           Revoir Enslave_Tap, on utilise pas le bon nom
# on vÃ©rifie que tun est bien enslave?:
##      ip a s "$1-$2" | grep $IP | head -1 | grep master | grep $NETWORK
function Set_Service_Listen() {
    ipcalc -$2 $1 2>/dev/null 1>/dev/null
    if [ $? -eq 0 ]; then                                                           # OK valid IP
         ip -$2 -br address show | grep $1 2>/dev/null 1>/dev/null
        if [ $? -eq 0 ]; then                                                       # IP exists on a netdev, returning
            if [ "$6" == "new" ]; then
                DBSVC=$(Db_Get_SVC $VMMGR_DB_PATH $1 $2)
                if [ "$DBSVC" != "" ]; then
                    IFS=\| read -r VMID IP IPPORT IPVER NETWORK TYPE <<< $(echo "$DBSVC")
                    if [ "$IPPORT" ]; then
                        PORT=$IPPORT
                    else
                        PORT=$(Set_Port_Listen $4 $5)
                    fi
                else
                    PORT=$(Set_Port_Listen $4 $5)                                   # Generate new port
                fi
            else
                PORT=$6
            fi
            echo "$1|$PORT"
        fi
    else                                                                            # Not an IP, assuming iface name and using DB
        DBSVC=$(Db_Get_SVC $VMMGR_DB_PATH $1 $2)
        if [ "$DBSVC" != "" ]; then
            IFS=\| read -r VMID IP IPPORT IPVER NETWORK TYPE <<< $(echo "$DBSVC")
        fi
        DBNET=$(Db_Get_Network $VMMGR_DB_PATH $1)
        IFS=\| read -r DBIP DBPFX DBMIN DBMAX DBLAST DBIFACE BRIP <<< $(echo $DBNET)  # We get all information from DB
        if [ "$DBSVC" != "" ]; then                                                 # Data found in DB
            if [ "$3" == "bridge" ]; then                                           # We use bridge
                if [ "$TYPE" == "$3" ]; then                                        # Ok DB speak about bridge too
                    ip -$2 -br a s type bridge $NETWORK | grep $IP 2>/dev/null 1>/dev/null
                    if [ $? -eq 0 ]; then                                           # Bridge ok with IP already set, returning
                        echo "$IP|$IPPORT"
                    else                                                            # Bridge has not IP, setting it, returning
                        Set_Iface_Net $IP $DBPFX $NETWORK
                    fi
                elif [ "$TYPE" == "tun" ]; then                                     # DB speak about tun
                    ip -br a s type tun $1 2>/dev/null 1>/dev/null
                    if [ $? -eq 0 ]; then                                           # Tun exists
                        ip -$2 -br a s type tun | grep $IP 2>/dev/null 1>/dev/null
                        if [ $? -eq 0 ]; then                                       # tun exists with IP, returning
                            echo "$IP|$IPPORT"
                        else                                                        # tun exists but missing IP, setting, returning
                            Set_Iface_Net $IP $DBPFX $1
                            Enslave_Tap "$4-$5" $NETWORK $BRIDGETOOL
                            echo "$IP|$IPPORT"
                        fi
                    else                                                            # Tun not exists, creating, returning
                        New_Tap "$4-$5"
                        Set_Iface_Net $IP $DBPFX "$4-$5"
                        Enslave_Tap "$4-$5" $NETWORK $BRIDGETOOL
                        echo "$IP|$IPPORT"
                    fi
                fi
            elif [ "$3" == "tun" ]; then                                            # We use tun
                if [ "$TYPE" == "   $3" ]; then                                     # Db speak about tun, ok
                    ip -br a s type tun $1 2>/dev/null 1>/dev/null
                    if [ $? -eq 0 ]; then                                           # Tun exists
                        TUN=$1
                        ip -$2 -br a s type tun $1 | grep $IP 2>/dev/null 1>/dev/null
                        if [ $? -ne 0 ]; then                                       # Tun exists but missing IP, setting, returning
                            Set_Iface_Net $IP $DBPFX $1
                        fi
                    else                                                            # Tun not exists, creating, returning
                        New_Tap "$4-$5"
                        TUN="$4-$5"
                        Set_Iface_Net $IP $DBPFX "$4-$5"
                    fi
                    Enslave_Tap $TUN $NETWORK $BRIDGETOOL
                    echo "$IP|$IPPORT"
                fi
            fi
        else                                                                        # Data not found in DB
            ip -br address show type bridge $1 2>/dev/null 1>/dev/null
            if [ $? -eq 0 ]; then
                if [ "$3" == "tun" ]; then
                    IP=$(Set_New_IP $4 $5 $1 $2) 
                    New_Tap "$4-$5"
                    Enslave_Tap "$4-$5" $1 $BRIDGETOOL
                    Set_Iface_Net $IP $DBPFX "$4-$5"
                elif [ "$3" == "bridge" ]; then
                    if [ "$BRIP" != "" ]; then                                      # if bridge has default IP, using it
                        IP=$BRIP
                    else
                        IP=$(Set_New_IP $4 $5 $1 $2)                           # if not, generate new ip
                        Set_Iface_Net $IP $DBPFX $1
                    fi
                fi
                if [ "$6" == "new" ]; then
                    PORT=$(Set_Port_Listen $4 $5)                                  # Generate new port
                else
                    PORT=$6
                fi
                Db_Set_SVC $VMMGR_DB_PATH $4 $5 $IP $PORT $2 $1 $3            # Adding to DB
                echo "$IP|$PORT"
            fi
        fi
    fi
}

# Function: Set_NetDev
# Description: Create tap interfaces
# Args:
#   $1: VM Name
#   $2: Bridge name
#   $3: Number of tap devices
#   $4: -netdev template
#   $5: -device template
#   $6: Addr
function Set_NetDev() {
    Create_Bridge $2 $BRIDGETOOL on
    for NETNUMBER in $(seq 1 $3 ); do
        MAC="mac="$(Set_MAC $1 $(( $6 + $NETNUMBER )))
        TAPUP="script=$VMMGR_DATA_PATH/TAPSCRIPTS/tapup-$2"
        TAPDOWN="downscript=$VMMGR_DATA_PATH/TAPSCRIPTS/tapdown-$2"
        [ -r "$VMMGR_DATA_PATH/TAPSCRIPTS/tapup-$2" ] || ln $VMMGR_DATA_PATH/TAPSCRIPTS/tapup $VMMGR_DATA_PATH/TAPSCRIPTS/tapup-$2
        [ -r "$VMMGR_DATA_PATH/TAPSCRIPTS/tapdown-$2" ] || ln $VMMGR_DATA_PATH/TAPSCRIPTS/tapdown $VMMGR_DATA_PATH/TAPSCRIPTS/tapdown-$2
        echo "-netdev tap,id=virtio-tap$(( $6 + $NETNUMBER )),$TAPUP,$TAPDOWN,$4 -device virtio-net-pci,netdev=virtio-tap$(( $6 + $NETNUMBER )),$MAC,id=drive-virtio-tap$(( $6 + $NETNUMBER )),$5 "
     done
}
