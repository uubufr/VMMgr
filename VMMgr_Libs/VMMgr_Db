#! /bin/bash
#
# script name: VMMgr_Db
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.04
# description: Manage Database for VMMgr_Launcher
#
# Functions:
#   Set_Db: Check and initialize DB
#   Db_Create_VM: Declare a new vm in db
#   Db_Delete_VM: Delete a vm in db
#   Db_List_VMs: List all vm form db
#   Db_Filter_VMs: List vm form db
#   Db_isEnabled_VM: Check if VM is enabled
#   Db_Enable_VM: Mark VM as Enabled
#   Db_Disable_VM: Mark VM as Disabled
#   Db_Get_VM_Config: get VM config file
#   Db_Set_IPPORT: Set IP and PORT for a service (spice, telnet or qmp)
#   Db_Get_IPPORT: Get IP and PORT for a service (spice, telnet or qmp)
#   Db_Search_PORT: Search for an existing port
#   Db_Set_MAC: Get mac address (without OUI PART) from db, if not exists, create new one
#   Db_Get_Network: Check network info from ifname
#   Db_Create_Network: Declare a new Network
#   Db_Set_Network_IP: add a default IP to a network (bridge)
#   Db_Get_SVC: Get all infomations about service
#   Db_Set_SVC: Add service informations
#   Db_Update_Net_NextIP: Update Last IP used in NETWORKS table
#   Get_Db_UUID: Get uuid
#   Db_Get_Groups: list all groups
#   Db_Get_Group_Member: List all members of group
#   Db_Set_Group: Add group
#   Db_Enable_Group: Enable group
#   Db_Disable_Group: Disable Group
#   Db_IsEnabled_Group: Check if group is enabled
#   Db_Get_MemberOf: Get Group of a vm
#   Db_Export_VM: Export VM
#   Db_Import_VM: Import VM

# function: Set_Db
# description: Check and initialize DB
# Arg:
#   $1: Db Path (parent dir)
function Set_Db() {
 DBVERSION=1
 if [ ! -r $1/VMMGR_.db ]; then
    VMMGR_LOG "VMMGR" "DB" "Creating Database"
    sqlite3 $1/VMMGR_.db <<EOF

CREATE TABLE VMMGR(
   VERSION INTERGER NOT NULL
);
CREATE TABLE VM(
    VMiD INTEGER PRIMARY KEY,
    Name TEXT NOT NULL,
    Config TEXT NOT NULL,
    Enabled INTEGER,
    UUID TEXT NOT NULL,
    MemberOf TEXT,
    SSHIP TEXT,
    SSHHOSTNAME TEXT
);

CREATE TABLE SPICE(
    VMiD INTEGER PRIMARY KEY,
    IP TEXT NOT NULL,
    PORT INTEGER NOT NULL,
    IPVER TEXT NOT NULL,
    NETWORK TEXT NOT NULL,
    TYPE TEXT NOT NULL,
    FOREIGN KEY(VMiD) REFERENCES VM(VMiD)
);

CREATE TABLE TELNET(
    VMiD INTEGER PRIMARY KEY,
    IP TEXT NOT NULL,
    PORT INTEGER NOT NULL,
    IPVER TEXT NOT NULL,
    NETWORK TEXT NOT NULL,
    TYPE TEXT NOT NULL,
    FOREIGN KEY(VMiD) REFERENCES VM(VMiD)
);

CREATE TABLE QMP(
    VMiD INTEGER PRIMARY KEY,
    IP TEXT NOT NULL,
    PORT INTEGER NOT NULL,
    IPVER TEXT NOT NULL,
    NETWORK TEXT NOT NULL,
    TYPE TEXT NOT NULL,
    FOREIGN KEY(VMiD) REFERENCES VM(VMiD)
);

CREATE TABLE VNC(
    VMiD INTEGER PRIMARY KEY,
    IP TEXT NOT NULL,
    PORT INTEGER NOT NULL,
    IPVER TEXT NOT NULL,
    NETWORK TEXT NOT NULL,
    TYPE TEXT NOT NULL,
    FOREIGN KEY(VMiD) REFERENCES VM(VMiD)
);

CREATE TABLE NETWORKS(
    IP TEXT,
    PREFIX INTERGER,
    MINIP TEXT,
    MAXIP TEXT,
    LAST TEXT,
    IFACE TEXT,
    BRIP TEXT
);

CREATE TABLE MAC(
    VMiD INTEGER,
    SUBMAC INTEGER NOT NULL,
    NETID INTERGER NOT NULL
);

CREATE TABLE GROUPS(
    NAME TEXT NOT NULL,
    ENABLED INTEGER,
    MEMBERS TEXT
);
EOF

    echo "INSERT INTO VMMGR ( VERSION ) values ( '$DBVERSION' );" | sqlite3 $1/VMMGR_.db
 fi
 VMMGR_LOG "VMMGR" "DB" "Checking for schema update"
 Db_Check_SCHEMA $1 $DBVERSION
}

# Function: Db_Create_VM
# Description: Declare a new vm in db
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
#   $3: Config name
#   $4: UUID
#   $5: Group
function Db_Create_VM() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ "$EXISTS" == "" ]; then
  echo "insert into VM ( Name, Config, Enabled, UUID, MemberOf) values ('$2', '$3','0', '$4', '$5');" | sqlite3 $1/VMMGR_.db
  echo "select VMiD from VM where Name='$2';"| sqlite3 $1/VMMGR_.db
 else
  echo $EXISTS
 fi
}

# Function: Db_Delete_VM
# Description: Delete a vm fro$m db
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
function Db_Delete_VM() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
    echo "delete from SPICE where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
    echo "delete from QMP where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
    echo "delete from TELNET where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
    echo "delete from VM where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
    echo "delete from MAC where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
 fi
}

# Function: Db_List_VMs
# Description: List all vm form db
# Args:
#   $1: Db Path (parent dir)
function Db_List_VMs() {
 echo "select Name from VM;" | sqlite3 $1/VMMGR_.db
}

# Function: Db_Filter_VMs
# Description: List vm form db
# Args:
#   $1: Db Path (parent dir)
#   $2: field
#   $3: value
function Db_Filter_VMs() {
    echo "select Name from VM where $2='$3';" | sqlite3 $1/VMMGR_.db
}

# Function Db_isEnabled_VM
# Description: Check if VM is enabled
# Args:
#   $1: Db Path (parent dir)
#   $2: Vm Name
function Db_isEnabled_VM() {
 echo "select Enabled from VM where Name='$2';" | sqlite3 $1/VMMGR_.db
}

# Function Db_Enable_VM
# Description: Mark VM as Enabled
# Args:
#   $1: Db Path (parent dir)
#   $2: Vm Name
function Db_Enable_VM() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
    echo "update VM SET Enabled=1 where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
 fi
}

# Function Db_Disabled_VM
# Description: Mark VM as Disabled
# Args:
#   $1: Db Path (parent dir)
#   $2: Vm Name
function Db_Disable_VM() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
    echo "update VM SET Enabled=0 where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
 fi
}

# Function: Db_Get_VM_Config
# Description: get VM config file
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
function Db_Get_VM_Config() {
 echo "select Config from VM where Name='$2';" | sqlite3 $1/VMMGR_.db
}

# Function: Db_Set_IPPORT
# Description: Set IP and PORT for a service (spice, telnet or qmp)
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
#   $3: service (spice, telnet, qmp)
#   $4: IP
#   $5: PORT
function Db_Set_IPPORT() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
  echo "insert into ${3^^*} (VMiD, IP, PORT ) values ( '$EXISTS', '$4', '$5');" | sqlite3 $1/VMMGR_.db
 fi
}


# Function: Db_Get_IPPORT
# Description: Get IP and PORT for a service (spice, telnet or qmp)
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
#   $3: service (spice, telnet, qmp)
function Db_Get_IPPORT() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
  echo "select IP, PORT from ${3^^*} where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
 fi
}

# Function: Db_Search_PORT
# Description: search for an existing port
# Args:
#   $1: Db Path (parent dir)
#   $2: service (spice, telnet, qmp)
#   $3: Port number
function Db_Search_PORT() {
        echo "select PORT from ${2^^*} where PORT='$3';" | sqlite3 $1/VMMGR_.db
}

# Function Db_Set_MAC
# Description: Get mac address (without OUI PART) from db
#              if not exists, create new one
# Args:
#   $1: Db Path (parent dir)
#   $2: VM Name
#   $3: Net device number
function Db_Set_MAC() {
 VMID=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$VMID" == "" ]; then
    EXISTS=$(echo "select printf('%06X', SUBMAC) from MAC where VMiD='$VMID' AND NETID='$3';" | sqlite3 $1/VMMGR_.db)
    if [ "$EXISTS" == "" ]; then
        SUBMAC=$(echo "select SUBMAC from MAC ORDER BY SUBMAC DESC LIMIT 1;" | sqlite3 $1/VMMGR_.db)
        if [ "$SUBMAC" == "" ]; then SUBMAC=0; else SUBMAC=$(( $SUBMAC + 1 )); fi
        echo "insert into MAC (VMiD, SUBMAC, NETID) values ('$VMID', '$SUBMAC', '$3');" | sqlite3 $1/VMMGR_.db
        EXISTS=$(echo "select printf('%06X', SUBMAC) from MAC where VMiD='$VMID' AND NETID='$3';" | sqlite3 $1/VMMGR_.db)
    fi
 fi
 echo $EXISTS
}

# Function: Db_Get_Network
# Description: Check network info from ifname
# Args:
#   $1: Db Path (parent dir)
#   $2: Iface
function Db_Get_Network() {
 echo "select * from NETWORKS where IFACE='$2';" | sqlite3 $1/VMMGR_.db
}

# Function: Db_Create_Network
# Description: Declare a new Network
#   $1: Db Path
#   $2: Network IP
#   $3: Prefix
#   $4: First IP available -1
#   $5: Last IP available
#   $6: Iface Name
function Db_Create_Network() {
 echo "insert into NETWORKS (IP, PREFIX, MINIP, MAXIP, LAST, IFACE) values ('$2', '$3', '$4', '$5', '$4', '$6');" | sqlite3 $1/VMMGR_.db
}

# Function: Db_Set_Network_IP
# Description: add a default IP to a network (bridge)
#              this allow to always use this IP
# Args:
#   $1: Db Path (parent dir)
#   $2: Network Name
#   $3: IP for this bridge
function Db_Set_Network_IP() {
    echo "update NETWORKS SET BRIP='$3' where IFACE='$2'" | sqlite3 $1/VMMGR_.db
}

# Function: Db_Get_SVC
# Description: Get all infomations about service
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
#   $3: service (spice, telnet, qmp)
function Db_Get_SVC() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
  echo "select * from ${3^^*} where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
 fi
}

# Function: DB_Set_SVC
# Description: Add service informations
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
#   $3: service (spice, telnet, qmp)
#   $4: IP
#   $5: PORT
#   $6: IPVER
#   $7: NETWORK
#   $8: TYPE
function Db_Set_SVC() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
  echo "insert into ${3^^*} (VMiD, IP, PORT, IPVER, NETWORK, TYPE ) values ( '$EXISTS', '$4', '$5', '$6', '$7', '$8' );" | sqlite3 $1/VMMGR_.db
 fi
}

# Function Db_Update_Net_NextIP
# Description: Update Last IP used in NETWORKS table
# Args:
#   $1: Db Path (parent dir)
#   $2: Network name
#   $3: Last IP
function Db_Update_Net_NextIP() {
    echo "update NETWORKS SET LAST='$3' WHERE IFACE='$2';" | sqlite3 $1/VMMGR_.db
}

# Function Get_Db_UUID
# Description: Get uuid
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
function Get_Db_UUID() {
    echo "select UUID from VM where Name='$2';" | sqlite3 $1/VMMGR_.db
}

# Function Db_Get_Groups
# Description: list all groups
# Args:
#   $1: Db Path (parent dir)
function Db_Get_Groups() {
        echo "select NAME from GROUPS;" | sqlite3 $1/VMMGR_.db
}

# Function: Db_Get_Group_Member
# Description: List all members of group
# Args:
#   $1: Db Path (parent dir)
#   $2: Group name
function Db_Get_Group_Member() {
    if [ "$2" ]; then
        echo "select NAME from VM where MemberOf='$2';" | sqlite3 $1/VMMGR_.db
    fi
}

# Function: Db_Set_Group
# Description: Add group
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
#   $3: Group Name
function Db_Set_Group() {
    RESULT=$(echo "select NAME from GROUPS WHERE NAME='$3';" | sqlite3 $1/VMMGR_.db)
    if [ "$RESULT" ]; then
        MEMEXIST=$(echo "select MEMBERS from GROUPS WHERE NAME='$3';" | sqlite3 $1/VMMGR_.db)
        MEMEXIST="$MEMEXIST $2"
        echo "update GROUPS SET MEMBERS='$MEMEXIST' WHERE NAME='$3';" | sqlite3 $1/VMMGR_.db
    else
        echo "insert into GROUPS (NAME, ENABLED, MEMBERS) values ( '$3', '0', '$2' );" | sqlite3 $1/VMMGR_.db
    fi
}

# Function: Db_Enable_Group
# Description: Enable group
# Args:
#   $1: Db Path (parent dir)
#   $2: Group name
function Db_Enable_Group() {
    RESULT=$(echo "select NAME from GROUPS WHERE NAME='$2';" | sqlite3 $1/VMMGR_.db)
    if [ "$RESULT" ]; then
        echo "update GROUPS SET ENABLED='1' WHERE NAME='$2';" | sqlite3 $1/VMMGR_.db
    fi
}

# Function: Db_Disable_Group
# Description: 
# Args:
#   $1: Db Path (parent dir)
#   $2: Group name
function Db_Disable_Group() {
    RESULT=$(echo "select NAME from GROUPS WHERE NAME='$2';" | sqlite3 $1/VMMGR_.db)
    if [ "$RESULT" ]; then
        echo "update GROUPS SET ENABLED='0' WHERE NAME='$2';" | sqlite3 $1/VMMGR_.db
    fi
}

# Function: Db_IsEnabled_Group
# Description: Check if group is enabled
# Args:
#   $1: Db Path (parent dir)
#   $2: Group name
function Db_IsEnabled_Group() {
    echo "select ENABLED from GROUPS WHERE NAME='$2';" | sqlite3 $1/VMMGR_.db
}

# Function: Db_Get_MemberOf
# Description: Get Group of a vm
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
function Db_Get_MemberOf() {
    echo "select MemberOf from VM WHERE NAME='$2';" | sqlite3 $1/VMMGR_.db
}

# Function: Db_Export_VM
# Description: Export VM
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
function Db_Export_VM() {
    BKPFILE="$VMMGR_DATA_PATH/VM_BKP/$2-$(date '+%Y-%m-%d_%H-%M-%S').bkp"
    RESULT=$(echo "select VMiD from VM WHERE NAME='$2';" | sqlite3 $1/VMMGR_.db)
    if [ "$RESULT" ]; then
        echo "VM|"$(echo "SELECT Name, Config, Enabled, UUID, MemberOf FROM VM where VMiD='$RESULT';" | sqlite3 $1/VMMGR_.db) > $BKPFILE
        for TABLE in $(echo "SPICE TELNET QMP VNC"); do
            DATA=$(echo "SELECT IP, PORT, IPVER, NETWORK, TYPE FROM $TABLE where VMiD='$RESULT';" | sqlite3 $1/VMMGR_.db)
            if [ "$DATA" ]; then
                echo "$TABLE|$DATA" >> $BKPFILE
            fi
        done
        DATA=$(echo "SELECT SUBMAC, NETID FROM MAC WHERE VMiD='$RESULT';" | sqlite3 $1/VMMGR_.db)
        if [ "$DATA" ]; then
            echo "MAC|$DATA" >> $BKPFILE
        fi
    else
        echo "VM $2 not found in database"
    fi
}

# Function: Db_Import_VM
# Description: Import VM
# Args:
#   $1: Db Path (parent dir)
#   $2: VM export file
function Db_Import_VM() {
    IFS=\| read -r VM NAME CONF ENABLED UUID GROUP <<< $(cat "$2" | grep "^VM|")
    RESULT=$(echo "select VMiD from VM WHERE NAME='$NAME';" | sqlite3 $1/VMMGR_.db)
    if [ "$RESULT" ]; then
        echo "Error, VM with name $NAME already exists"
    else
        echo "INSERT INTO VM ( Name, Config, Enabled, UUID, MemberOf) values ('$NAME', '$CONF','$ENABLED', '$UUID', '$GROUP');" | sqlite3 $1/VMMGR_.db
        RESULT=$(echo "select VMiD from VM WHERE NAME='$NAME';" | sqlite3 $1/VMMGR_.db)
        if [ ! "$RESULT" ]; then
            echo "Error importing VM $VMANE"
        else
            for TABLE in $(echo "SPICE TELNET QMP VNC"); do
                IFS=\| read -r TBL IP PORT IPVER NETWORK TYPE <<< $(cat "$2" | grep "^$TABLE|")
                if [ "$TBL" ]; then
                    echo "INSERT INTO $TABLE ( VMid, IP, PORT, IPVER, NETWORK, TYPE) values ('$RESULT', '$IP', '$PORT', '$IPVER', '$NETWORK', '$TYPE');" | sqlite3 $1/VMMGR_.db
                fi
            done
            MACS=$(cat "$2" | grep "^MAC|")
            if [ "$MACS" ]; then
                for MAC in $MACS; do
                    IFS=\| read -r TBL SUBMAC NETID <<< $(echo $MAC)
                    echo "INSERT INTO MAC ( VMid, SUBMAC, NETID ) values ('$RESULT', '$SUBMAC', '$NETID' );" | sqlite3 $1/VMMGR_.db
                done
            fi
        fi
    fi
}

# Function: Db_Set_SSH
# Description: add IP/Hostname for ssh - systemd acces
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
#   $3: SSH IP
#   $4: Hostname (optional, use VM name if undefined)
function Db_Set_SSH() {
    if [ "$4" == "" ]; then NAME=$1; else NAME=$4; fi
    echo "update VM SET SSHIP='$3' , SSHHOSTNAME='$NAME' WHERE NAME='$2';" | sqlite3 $1/VMMGR_.db
}

function Db_Get_SSH() {
    echo "SELECT SSHIP from VM WHERE NAME='$2';" | sqlite3 $1/VMMGR_.db
}

function Db_Delete_SSh() {
    echo "update VM SET SSHIP='' , SSHHOSTNAME='' WHERE NAME='$2';" | sqlite3 $1/VMMGR_.db
}

# Function: Db_Check_SCHEMA
# Description: Check Schema Version
# Args:
#   $1: Db Path (parent dir)
#   $2: Last DB Version
function Db_Check_SCHEMA() {
    TABLE=$(echo "SELECT name FROM sqlite_master WHERE type='table' AND name='VMMGR';" | sqlite3 $1/VMMGR_.db)
    if [ "$TABLE" == "" ]; then
        Db_Update_SCHEMA $1 0 $2
    else
        VERSION=$(echo "SELECT VERSION FROM VMMGR;" | sqlite3 $1/VMMGR_.db)
        if [ "$VERSION" != $2 ]; then
            Db_Update_SCHEMA $1 $VERSION $2
        fi
    fi
}

# Function: Db_Update_SCHEMA
# Description: Update db tables
# Args:
#   $1: Db Path (parent dir)
#   $2: Current DB Version
#   $3: Last Db Version
function Db_Update_SCHEMA() {
    VMMGR_LOG "VMMGR" "DB" "Updating DB from version $2 to $3"
   for DBUPD in $(seq $(( $2 + 1 )) $3); do
    cat $1/../DB_UPDATES/VERSION-$DBUPD | sqlite3 $1/VMMGR_.db
   done
}
