#! /bin/bash
#
# script name: VMMgr_Db
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.04
# description: Manage Database for VMMgr_Launcher
#
# Functions:
#   Set_Db: Check and initialize DB
#   Db_Create_VM: Declare a new vm in db
#   Db_Delete_VM: Delete a vm in db
#   Db_List_VMs: List all vm form db
#   Db_isEnabled_VM: Check if VM is enabled
#   Db_Enabled_VM: Mark VM as Enabled
#   Db_Disabled_VM: Mark VM as Disabled
#   Db_Get_VM_Config: get VM config file
#   Db_Set_IPPORT: Set IP and PORT for a service (spice, telnet or qmp)
#   Db_Get_IPPORT: Get IP and PORT for a service (spice, telnet or qmp)
#   Db_Search_PORT: Search for an existing port
#   Db_Set_MAC: Get mac address (without OUI PART) from db, if not exists, create new one
#   Db_Get_Network: Check network info from ifname
#   Db_Create_Network: Declare a new Network


###### SELECT NAME CONFIG FROM VM ORDER BY NAME DESC, CONFIG ASC;
#### on a pas encore de lien entre une déclaration de Réseau et l'IP:PORT (on a systématiquement le même réseau, ou on peut en créer autant qu'on veut?)
#### Avant d'assigner une IP, dig?


# function: Set_Db
# description: Check and initialize DB
# Arg:
#   $1: Db Path (parent dir)
function Set_Db() {
 if [ ! -r $1/VMMGR_.db ]; then
    sqlite3 $1/VMMGR_.db <<EOF
CREATE TABLE VM(
    VMiD INTEGER PRIMARY KEY,
    Name TEXT NOT NULL,
    Config TEXT NOT NULL,
    Enabled INTEGER
);

CREATE TABLE SPICE(
    VMiD INTEGER PRIMARY KEY,
    IP TEXT NOT NULL,
    PORT INTEGER NOT NULL,
    IPVER TEXT NOT NULL,
    NETWORK TEXT NOT NULL,
    TYPE TEXT NOT NULL,
    FOREIGN KEY(VMiD) REFERENCES VM(VMiD)
);

CREATE TABLE TELNET(
    VMiD INTEGER PRIMARY KEY,
    IP TEXT NOT NULL,
    PORT INTEGER NOT NULL,
    FOREIGN KEY(VMiD) REFERENCES VM(VMiD)
);

CREATE TABLE QMP(
    VMiD INTEGER PRIMARY KEY,
    IP TEXT NOT NULL,
    PORT INTEGER NOT NULL,
    FOREIGN KEY(VMiD) REFERENCES VM(VMiD)
);

CREATE TABLE NETWORKS(
    IP TEXT,
    PREFIX INTERGER,
    MINIP TEXT,
    MAXIP TEXT,
    LAST TEXT,
    IFACE TEXT,
    BRIP TEXT
);

CREATE TABLE MAC(
    VMiD INTEGER,
    SUBMAC INTEGER NOT NULL,
    NETID INTERGER NOT NULL,
    FOREIGN KEY(VMiD) REFERENCES VM(VMiD)
);
EOF
 fi
}

# Function: Db_Create_VM
# Description: Declare a new vm in db
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
#   $3: Config name
function Db_Create_VM() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ "$EXISTS" == "" ]; then
  echo "insert into VM ( Name, Config, Enabled) values ('$2', '$3','0');" | sqlite3 $1/VMMGR_.db
  echo "select VMiD from VM where Name='$2';"| sqlite3 $1/VMMGR_.db
 else
  echo $EXISTS
 fi
}

# Function: Db_Delete_VM
# Description: Delete a vm fro$m db
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
function Db_Delete_VM() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
    echo "delete from SPICE where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
    echo "delete from QMP where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
    echo "delete from TELNET where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
    echo "delete from VM where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
 fi
}

# Function: Db_List_VMs
# Description: List all vm form db
# Args:
#   $1: Db Path (parent dir)
function Db_List_VMs() {
 echo "select Name from VM;" | sqlite3 $1/VMMGR_.db
}

# Function Db_isEnabled_VM
# Description: Check if VM is enabled
# Args:
#   $1: Db Path (parent dir)
#   $2: Vm Name
function Db_isEnabled_VM() {
 echo "select Enabled from VM where Name='$2';" | sqlite3 $1/VMMGR_.db
}

# Function Db_Enabled_VM
# Description: Mark VM as Enabled
# Args:
#   $1: Db Path (parent dir)
#   $2: Vm Name
function Db_Enable_VM() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
    echo "update VM SET Enabled=1 where VMiD='$EXISTS';" sqlite3 $1/VMMGR_.db
 fi
}

# Function Db_Disabled_VM
# Description: Mark VM as Disabled
# Args:
#   $1: Db Path (parent dir)
#   $2: Vm Name
function Db_Disable_VM() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
    echo "update VM SET Enabled=1 where VMiD='$EXISTS';" sqlite3 $1/VMMGR_.db
 fi
}

# Function: Db_Get_VM_Config
# Description: get VM config file
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
function Db_Get_VM_Config() {
 echo "select Config from VM where Name='$2';" | sqlite3 $1/VMMGR_.db
}

# Function: Db_Set_IPPORT
# Description: Set IP and PORT for a service (spice, telnet or qmp)
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
#   $3: service (spice, telnet, qmp)
#   $4: IP
#   $5: PORT
function Db_Set_IPPORT() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
  echo "insert into ${3^^*} (VMiD, IP, PORT ) values ( '$EXISTS', '$4', '$5');" | sqlite3 $1/VMMGR_.db
 fi
}


# Function: Db_Get_IPPORT
# Description: Get IP and PORT for a service (spice, telnet or qmp)
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
#   $3: service (spice, telnet, qmp)
function Db_Get_IPPORT() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
  echo "select IP, PORT from ${3^^*} where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
 fi
}

# Function: Db_Search_PORT
# Description: search for an existing port
# Args:
#   $1: Db Path (parent dir)
#   $2: service (spice, telnet, qmp)
#   $3: Port number
function Db_Search_PORT() {
        echo "select PORT from ${2^^*} where PORT='$3';" | sqlite3 $1/VMMGR_.db
}

# Function Db_Set_MAC
# Description: Get mac address (without OUI PART) from db
#              if not exists, create new one
# Args:
#   $1: Db Path (parent dir)
#   $2: VM Name
#   $3: Net device number
function Db_Set_MAC() {
 VMID=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 EXISTS=$(echo "select printf('%06X', SUBMAC) from MAC where VMiD='$VMID' AND NETID='$3';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
  echo "select SUBMAC from MAC ORDER BY V DESC LIMIT 1;" | sqlite3 $1/VMMGR_.db
  if [ "$SUBMAC" == "" ]; then $SUBMAC=0; else $SUBMAC=$(( $SUBMAC + 1 )); fi
  echo "insert into MAC (VMid, SUBMAC, NETID) values ('$VMID', '$SUBMAC', '$3');" | sqlite3 $1/VMMGR_.db
  EXISTS=$(echo "select printf('%06X', SUBMAC) from MAC where VMiD='$VMID' AND NETID='$3';" | sqlite3 $1/VMMGR_.db)
 fi
 echo $EXISTS
}

# Function: Db_Get_Network
# Description: Check network info from ifname
# Args:
#   $1: Db Path (parent dir)
#   $2: Iface
function Db_Get_Network() {
 echo "select * from NETWORKS where IFACE='$2';" | sqlite3 $1/VMMGR_.db
}

# Function: Db_Create_Network
# Description: Declare a new Network
#   $1: Db Path
#   $2: Network IP
#   $3: Prefix
#   $4: First IP available -1
#   $5: Last IP available
#   $6: Iface Name
function Db_Create_Network() {
 echo "insert into NETWORKS (IP, PREFIX, MINIP, MAXIP, LAST, IFACE) values ('$2', '$3', '$4', '$5', '$4', '$6');" | sqlite3 $1/VMMGR_.db
}

# Function: Db_Set_Network_IP
# Description: add a default IP to a network (bridge)
#              this allow to always use this IP
# Args:
#   $1: Db Path (parent dir)
#   $2: Network Name
#   $3: IP for this bridge
function Db_Set_Network_IP() {
    echo "update NETWORKS values BRIP='$3' where IFACE='$2'" | | sqlite3 $1/VMMGR_.db
}

# Function: Db_Get_SVC
# Description: Get all infomations about service
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
#   $3: service (spice, telnet, qmp)
function Db_Get_SVC() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
  echo "select * from ${3^^*} where VMiD='$EXISTS';" | sqlite3 $1/VMMGR_.db
 fi
}

# Function: DB_Set_SVC
# Description: Add service informations
# Args:
#   $1: Db Path (parent dir)
#   $2: VM name
#   $3: service (spice, telnet, qmp)
#   $4: IP
#   $5: PORT
#   $6: IPVER
#   $7: NETWORK
#   $8: TYPE
function Db_Set_SVC() {
 EXISTS=$(echo "select VMiD from VM where Name='$2';" | sqlite3 $1/VMMGR_.db)
 if [ ! "$EXISTS" == "" ]; then
  echo "insert into ${3^^*} (VMiD, IP, PORT, IPVER, NETWORK, TYPE ) values ( '$EXISTS', '$4', '$5', '$6', '$7', '$8' );" | sqlite3 $1/VMMGR_.db
 fi
}

# Function Db_Update_Net_NextIP
# Description: Update Last IP used in NETWORKS table
# Args:
#   $1: Db Path (parent dir)
#   $2: Network name
#   $3: Last IP
function Db_Update_Net_NextIP() {
    echo "update NETWORKS SET LAST=$3 WHERE IFACE=$2;" | sqlite3 $1/VMMGR_.db)
}
