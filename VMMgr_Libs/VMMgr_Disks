#! /bin/bash
#
# script name: VMMgr_Disks
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.04
# description: Disks management
#
# Functions:
# Set_Disk_Threads: Create threads objects
# Set_Virtio_Disks: Take the list of disks, then génerate -object and -device
# Set_Disks: Get disk list, check if they already exists and if not, create it
# Set_Pci_Bridge: Create Pci_Bridge for Virtio Disks

# Function: Set_Disk_Threads
# Description: Create threads objects
# Args:
#   $1: number of threads
function Set_Disk_Threads() {
    THREADS=""
    for DTHREAD in $(seq 1 $1); do
        THREADS="$THREADS -object iothread,id=iothread$DTHREAD"
    done
    echo $THREADS
}

# Function: Set_Pci_Bridge
# Description: Create Pci_Bridge for Virtio Disks
# Args:
#   $1: How many bridge?
function Set_Pci_Bridge() {
    PCIs=""
    for PCI in $(seq 1 $1 ); do
        PCIs="$PCIs -device pci-bridge,id=pci.$PCI,chassis_nr=1"
    done
    echo $PCIs
}

# Function: Set_Disks
# Description: Get disk list, check if they already exists and if not, create it
# Args:
#   $1: Vm Name
function Set_Disks() {
    . $VMMGR_CONFIG_PATH/DATA/VMMgr_VirtioDisk
    DisksList=""
    DNUM=0
    CPATH=""
    for ARRAYNUM in $(seq 1 ${#Virtio_Disk[@]}); do
        read -r DNUMBER DSIZE DPATH DTPL <<< $(echo "${Virtio_Disk[$(( $ARRAYNUM - 1 ))]}")
        if [ "$DTPL" == "" ]; then DTPL="SSDCOW"; fi
        if [ "$DNUMBER" == "" ]; then continue; fi
        case "${DPATH%%:*}" in
            "order")
                ORDER="order"
                ;;
            "share")
                ORDER="share"
                ;;
            *)
                ORDER="share"
                ;;
        esac
        
        CounterPATH="1"
        for drive in $(seq 1 $DNUMBER); do
            DNUM=$(( DNUM + 1 ))

            ### Calculate vdxx name
            read VDX VDY <<< $(echo "ibase=10;obase=26;$(( $DNUM - 1 ))" | bc)
            if [ "$VDY" == "" ]; then VDY=$VDX; VDX=""; fi
            VDNAME="vd$(awk -v hda=$VDX -v hdb=$VDY 'BEGIN{ i=hda+96; if ( hda > 0 ) printf "%c", i; x=hdb+97; printf "%c", x }')"
            DRIVENAME="Qemu-Virtio-Disk_$NAME-$DSIZE-$VDNAME-$DTPL"
            
            ### First, we need to find existing disk:
            DFOUND=0
            OldCounter=$CounterPATH
            for EPATH in $( echo $DPATH | tr : \  ); do
                [ -d $EPATH ] || mkdir -p $EPATH
                if [ -r "$EPATH/$DRIVENAME" ]; then
                    DFOUND=1; break;
                else
                   if [ "$ORDER" == "share" ]; then
                    CounterPATH=$(( $CounterPATH + 1 ))
                   fi
                fi
            done
            if [ "$DFOUND" == 1 ]; then
                CPATH=${EPATH%/}
                DisksList="$DisksList|$EPATH/$DRIVENAME"
            else
                CounterPATH=$OldCounter
                case "$ORDER" in
                    "share")
                        DPATH=${DPATH#share:}
                            CPATH=$( echo $DPATH | cut -d: -f $CounterPATH)
                            if [ "$CPATH" == "" ]; then
                                CounterPATH=1
                                CPATH=$( echo $DPATH | cut -d: -f $CounterPATH)
                            fi
                            CounterPATH=$(( $CounterPATH + 1 ))
                        ;;
                    "order")
                        DPATH=${DPATH#order:}
                        # Here, we need to check if we have enough space on the disk, if not, we check next path:
                        CPATH=$( echo $DPATH | cut -d: -f $CounterPATH)
                        IAVAIL=$(echo "$(df --block-size=1k --sync --output=iavail $CPATH | tail -1)K" | numfmt --from=iec )
                        AVAIL=$(echo "$(df --block-size=1k --sync --output=avail $CPATH | tail -1)K" | numfmt --from=iec )
                        OSIZE=$(echo 8G | numfmt --from=iec)
                        AVAIL=$(( $AVAIL - $OSIZE ))
                        
                        # Not enough space left on the device
                        while [ $AVAIL -le "0" ]; do
                            CounterPATH=$(( $CounterPATH + 1 ))
                            CPATH=$( echo $DPATH | cut -d: -f $CounterPATH)
                            if [ "$CPATH" == "" ]; then                     # end of path list, so no space left anywhere, error
                                break;
                            else                                            # Checking next path
                                IAVAIL=$(echo "$(df --block-size=1k --sync --output=iavail $CPATH | tail -1)K" | numfmt --from=iec )
                                AVAIL=$(echo "$(df --block-size=1k --sync --output=avail $CPATH | tail -1)K" | numfmt --from=iec )
                                OSIZE=$(echo 8G | numfmt --from=iec)
                                AVAIL=$(( $AVAIL - $OSIZE ))
                            fi
                        done
                        ;;
                esac
                IFS=-  read QN QS QV QT <<< $( echo ${DRIVENAME#Qemu-Virtio-Disk_})
                QIMG=$QT\_IMG
                if [ "${!QIMG}" == "" ]; then QIMG="SSDCOW_IMG"; fi         ## Missing Var for qemu_create
                qemu-img create ${!QIMG} "$CPATH/$DRIVENAME" $DSIZE 2>/dev/null 1>/dev/null
                DisksList="$DisksList|$CPATH/$DRIVENAME"
            fi
        done
    done
    echo ${DisksList#|}
}

# Function: Set_Virtio_Disks
# Description: Déclare iothreads, pci-bridges, and drives
# Args:
#   $1: Vm Name
#   $2: Num Threads
#   $3: DiskLists
function Set_Virtio_Disks() {
    . $VMMGR_CONFIG_PATH/DATA/VMMgr_VirtioDisk
    COUNT=0;PCOUNT=0
    PCIBRIDGE=1
    declare -i THREAD=1
    for DISK in $(echo $3 | tr \| \  ); do

        ### Max 0x1F (31) drive per pci-device
        COUNT=$(( $COUNT + 1 ))
        PCOUNT=$(( $PCOUNT + 1 ))
        if [ $PCOUNT -gt 31 ]; then
            PCIBRIDGE=$(( $PCIBRIDGE + 1 ))
            PCOUNT=1
        fi

        ### Extract Template and hd name from disk name:
        IFS=- read DISKNAME DISKSIZE DISKHD DISKTPL <<< $(echo ${DISK##*Qemu-Virtio-Disk_})

        ### make -drive and -device params
        DRIVEOPT=${!DISKTPL}
        HDFORMAT=${DISKTPL}_IMG; HDFORMAT=${!HDFORMAT}; HDFORMAT=${HDFORMAT#*-f }; HDFORMAT=${HDFORMAT%% *}
        if [ "$HDFORMAT" == "qcow2" ]; then
            # l2-cache-size = Disk_size_Byte / ( cluster_size / 8)
            # refcount-cache-size = disk_size_GB * ( cluster_size * 8 / refcount_bits )
            # cache-size= l2-cache-size + refcount-cache-size
 
            DISKSIZEO=$(numfmt --from=iec $DISKSIZE)
            CLUSTERSIZE=${DISKTPL}_IMG; CLUSTERSIZE=${!CLUSTERSIZE}; CLUSTERSIZE=${CLUSTERSIZE#*cluster_size=}; CLUSTERSIZE=${CLUSTERSIZE^^}; CLUSTERSIZE=${CLUSTERSIZE%% k}
            if [ "$CLUSTERSIZE" == "" ]; then CLUSTERSIZE=64K; fi
            CLUSTERSIZE=$(numfmt --from=iec ${CLUSTERSIZE^^})
            L2CLUSTERSIZE=$(( $CLUSTERSIZE / 8 ))
            L2CACHE=$(( $DISKSIZEO / $L2CLUSTERSIZE ))
        
            REFCOUNTBIT=16
            REFCLUSTERSIZE=$(( $CLUSTERSIZE * 8 / $REFCOUNTBIT ))
            REFCACHE=$(( ${DISKSIZE%G} * $REFCLUSTERSIZE ))
            
            TOTALCACHE=$(( $L2CACHE + $REFCACHE ))
            
            DRIVEOPT="${!DISKTPL},l2-cache-size=$L2CACHE,cache-size=$TOTALCACHE"
        fi
        DRIVES="$DRIVES-drive file=$DISK,id=virtio-disk$COUNT,node-name=$DISKHD,$DRIVEOPT -device virtio-blk-pci,iothread=iothread$THREAD,ioeventfd=on,event_idx=on,scsi=off,config-wce=off,drive=virtio-disk$COUNT,bus=pci.$PCIBRIDGE,addr=0x$(echo "ibase=10;obase=16;$PCOUNT" | bc).0x0 "
        #DRIVES="$DRIVES-drive file=$DISK,if=none,format=qcow2,id=virtio-disk$COUNT,cache=directsync,aio=native,werror=enospc,rerror=report -device virtio-blk-pci,iothread=iothread$THREAD,ioeventfd=on,event_idx=on,scsi=off,config-wce=off,drive=virtio-disk$COUNT,bus=pci.$PCIBRIDGE,addr=0x$(echo "ibase=10;obase=16;$PCOUNT" | bc).0x0 "
        THREAD=$(( $THREAD + 1 )); [ $THREAD -gt $2 ] && THREAD=1
    done

    ### Generate iothreads and pci-bridge
    IOTHREADS=$(Set_Disk_Threads $2)
    PCIs=$(Set_Pci_Bridge $PCIBRIDGE)
    echo $IOTHREADS $PCIs $DRIVES
}
