#! /bin/bash
#
# script name: VMMgr_Functions
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.04
# description: All usefull functions
#
# Functions:
# Custom_VM_Config: Customize VM Configuration
# Customize_Unit: Customize Systemd Unit
# Customize_Target: Customize Systemd target
# Start_VM_From_Config: Start VM using VM Config file
# VM_Is_Running: check if vm is running
# List_All_VM: Get the list of VMs
# VM_Delete: Delete a vm
# set_DNS: register vm name with IP

# Function : Check_Existing_VM
# Description: Check on DB if VM already exists
# Args:
#   $1: VM Name
function Check_Existing_VM() {
 Set_Db $VMMGR_DB_PATH
 Db_Get_VM_Config $VMMGR_DB_PATH $1
}

# Function: Custom_VM_Config
# Description: Customize VM Configuration
# Args:
#   $1: VM name
#   $2: VM config path
function Custom_VM_Config() {
    VMMGR_LOG "$1" "SETTING" "Customize vm config for $1"
    sed -i "s/%%NAME%%/$1/g" $2
}

# Function: Customize_Unit
# Description: Customize Systemd Unit
# Args:
#   $1: VM Name
#   $2: VM config path
function Customize_Unit() {
    VMMGR_LOG "$1" "SETTING" "Customize Unit file for $1"
    AFTER=""; BEFORE="", CONFLICT=""
    UNIT="$VMMGR_DATA_PATH/UNITS/$1.service"
    cp $VMMGR_DATA_PATH/UNITS/systemd-template.service $UNIT
    sed -i "s/%%NAME%%/$1/g" $UNIT
    BEFORE=$(grep "^BEFORE=" $2 | cut -d= -f 2)
    AFTER=$(grep "^AFTER=" $2 | cut -d= -f 2)
    CONFLICT=$(grep "^CONFLICT=" $2 | cut -d= -f 2)
    sed -i "s/%%AFTER%%/$AFTER/g" $UNIT
    sed -i "s/%%BEFORE%%/Before=$BEFORE/g" $UNIT
    sed -i "s|%%VMMGRPATH%%|$VMMGR_PATH/VMMgr_Launcher|g" $UNIT
    sed -i "s/%%CONFLICT%%/Conflicts=$CONFLICT/g" $UNIT
    INGROUP=$(Db_Get_MemberOf $VMMGR_DB_PATH $1)
    if [ "$INGROUP" ]; then
        if [ "$(Db_IsEnabled_Group $VMMGR_DB_PATH $INGROUP)" == "1" ]; then
            sed -i "s/%%WANTED%%/$INGROUP.target/g" $UNIT
        fi
    fi
    sed -i "s/%%WANTED%%/VMMgr_.target/g" $UNIT
    AUDIO=$(grep "^QEMU_AUDIO_DRV=" $2 | cut -d= -f 2)
    sed -i "s/%%AUDIO%%/$AUDIO/g" $UNIT
    sed -i "s|%%PIDFILE%%|/run/VMMGR/$1|g" $UNIT
}

# Function: Customize_Target
# Description: Customize Systemd target
# Args:
#   $1: Group Name
function Customize_Target() {
    sed -i "s|%%GROUP%%|$1|g" $VMMGR_DATA_PATH/UNITS/$1.target
}

# Function VMMGR_LOG
# Description: log in $VMMGR_LOG_PATH/VMMgr.log
# Args:
#   $1: VM name
#   $2: Action
#   $3: Message
function VMMGR_LOG() {
    VMNAME=$1
    VMPROC=""
    PIDDIR=/run/VMMGR
    [ -d $PIDDIR ] || PIDDIR=$VMMGR_DATA_PATH
    
    if [ -f $PIDDIR/$1 ]; then
        VMPROC=$(sudo cat $PIDDIR/$1)
    fi
    VMMGRPROC=$$
    CDATE=$(date '+%A %d-%m-%Y %T')
    if [ "$VMNAME" == "VMMGR" ] || [ "$VMPROC" == "" ]; then
        echo "$CDATE VMMgr: [$2] pid=$VMMGRPROC euid=$(id -u) msg=$3" >>    $VMMGR_LOG_PATH/VMMgr.log
        sudo chmod 660 $VMMGR_LOG_PATH/VMMgr.log
    else
        [ -w $VMMGR_LOG_PATH/$VMNAME-log ] ||  touch $VMMGR_LOG_PATH/$VMNAME-log
        echo "$CDATE VMMgr: [$2] pid=$VMPROC euid=$(id -u) msg=$3" >> $VMMGR_LOG_PATH/$VMNAME-log
        sudo chmod 660 $VMMGR_LOG_PATH/$VMNAME-log
    fi
}

# Function: Start_VM_From_Config
# Description: Start VM using VM Config file
#               Here, we create many things
# Args:
#   $1: VM Name
#   $2: VM config path
function Start_VM_From_Config() {
    echo "starting $1"
    VMMGR_LOG "VMMGR" "START" "Starting $1, generating config "
    VMMGR_LOG "$1" "START" "Starting $1, generating config:"
    if [ -r /etc/VMMGR/VMMgr_.conf ]; then
        . /etc/VMMGR/VMMgr_.conf
    elif [ -r $(dirname $0)/VMMgr_.conf ]; then
        . $(dirname $0)/VMMgr_.conf
    else
        echo "No config VMMgr_.conf found, abording..."
        return
    fi

    # Creating main key #
    MAINKEY=$(openssl rand -base64 32)
    MAINSEC="-object secret,id=secmain0,format=base64,data=$MAINKEY"

    . $2
    . $VMMGR_DATA_PATH/DATA/VMMgr_Devices
    [ -r $VMMGR_CONFIG_PATH/DATA/VMMgr_Devices ] && . $VMMGR_CONFIG_PATH/DATA/VMMgr_Devices
    Get_Bridge_Tool
    
    ### SPICE ###
    . $VMMGR_DATA_PATH/DATA/VMMgr_Spice
    [ -r $VMMGR_CONFIG_PATH/DATA/VMMgr_Spice ] && . $VMMGR_CONFIG_PATH/DATA/VMMgr_Spice
    . $2
    if [ "$SPICE" == "on" ]; then
        IPPORT=$(Set_Service_Listen $SPICEIP $SPICEIPVER $SPICETYPE $NAME spice $SPICEPORT)
        SPICEIP=${IPPORT%|*}; SPICEPORT=${IPPORT#*|}
        . $VMMGR_DATA_PATH/DATA/VMMgr_Spice
        [ -r $VMMGR_CONFIG_PATH/DATA/VMMgr_Spice ] && . $VMMGR_CONFIG_PATH/DATA/VMMgr_Spice
        Set_Remote_Viewer spice $SPICETPL $NAME $IPPORT $SPICEPWD
        VMMGR_LOG "$1" "SETTING" "$1: Spice remote access: ${!SPICETPL}"
        AUDIO="-audiodev driver=spice,id=audiospice"
    else
        SPICETPL=TPLNULL
    fi
    
    ### TELNET MONITOR ###
    if [ "$TELNET" == "on" ]; then
        IPPORT=$(Set_Service_Listen $TELNETIP $TELNETIPVER $TELNETTYPE $NAME telnet $TELNETPORT)
        TELNETTPL="-monitor telnet:$(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}'):${IPPORT#*|},server,nowait"
        VMMGR_LOG "$1" "SETTING" "$1: telnet monitor: $TELNETTPL"
    else
        TELNETTPL=""
    fi

    ### VNC ###
    if [ "$VNC" == "on" ]; then
        . $VMMGR_DATA_PATH/DATA/VMMgr_VNC
        [ -r $VMMGR_CONFIG_PATH/DATA/VMMgr_VNC ] && . $VMMGR_CONFIG_PATH/DATA/VMMgr_VNC
        . $2
        IPPORT=$(Set_Service_Listen $VNCIP $VNCIPVER $VNCTYPE $NAME vnc $VNCPORT)
        VNCIP=$(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}'); VNCPORT=${IPPORT#*|}
        . $VMMGR_DATA_PATH/DATA/VMMgr_VNC
        [ -r $VMMGR_CONFIG_PATH/DATA/VMMgr_VNC ] && . $VMMGR_CONFIG_PATH/DATA/VMMgr_VNC
        echo "Remote Viewer with x509 do not work, please use another vnc viewer like Remina"
        Set_Remote_Viewer vnc $VNCTPL $NAME $IPPORT $VNCPWD
        VMMGR_LOG "$1" "SETTING" "$1: VNC remote access: ${!VNCTPL}"
    else
        VNCTPL=TPLNULL
    fi
    
    ### QMP MONITOR ###
    if [ "$QMP" == "on" ]; then
        IPPORT=$(Set_Service_Listen $QMPIP $QMPIPVER $QMPTYPE $NAME qmp $QMPPORT)
        QMPTPL="-chardev socket,id=qmp01,host=$(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}'),port=${IPPORT#*|},server,nowait -mon chardev=qmp01,mode=control"
        VMMGR_LOG "$1" "SETTING" "$1: QMP monitor: $QMPTPL"
    else
        QMPTPL=""
    fi

    ### Virtio NETWORK ###
    . $VMMGR_DATA_PATH/DATA/VMMgr_VirtioNet
    [ -r $VMMGR_CONFIG_PATH/DATA/VMMgr_VirtioNet ] && . $VMMGR_CONFIG_PATH/DATA/VMMgr_VirtioNet
    declare -i NUMDEV=0
    for NET in $(echo $NETWORKDEVICE); do
        NETARRAY="$NETARRAY $(Set_NetDev $NAME ${NET%|*} ${NET#*|} "$NETDEV" "$DEVICE" $NUMDEV)"
        NUMDEV=$(( $NUMDEV + ${NET#*|} ))
    done
    VMMGR_LOG "$1" "SETTING" "$1: Networks interfaces: $NETARRAY"
    
    ### Virtio Disks ###
    if [ "$Virtio_Disk" ]; then
        VMMGR_LOG "$1" "SETTING" "Virtio disks"
        export Virtio_Disk
        DisksList=$(Set_Disks $NAME)
        VIRTIODISKS=$(Set_Virtio_Disks $NAME $IOTHREADS $DisksList)
        unset Virtio_Disk
        VMMGR_LOG "$1" "SETTING" "$1: Virtio disks: $VIRTIODISKS"
    fi
    
    ### SCSI Disks ###
    if [ "$Scsi_Disk" ]; then
        export Scsi_Disk
        DisksList=$(Set_SDisks $NAME)
        SCSIDISKS=$(Set_Scsi_Disks $NAME $DisksList)
        unset Scsi_Disk
        VMMGR_LOG "$1" "SETTING" "$1: SCSI Disks: $SCSIDISKS"
    fi
    
    ### CPU/SMP/NUMA/MACHINE ###
    . $VMMGR_DATA_PATH/DATA/VMMgr_CPU
    [ -r $VMMGR_CONFIG_PATH/DATA/VMMgr_CPU ] && . $VMMGR_CONFIG_PATH/DATA/VMMgr_CPU
    CORE="-machine ${!MACHINETPL} ${!SMPTPL} -cpu ${!CPU}"
    [ "$MAXMEM" ] || MAXMEM="undefined"
    MEMORY=$(Check_MEM $MEM $MAXMEM $SLOT)
    VMMGR_LOG "$1" "SETTING" "$1: CPU: $CORE"
    VMMGR_LOG "$1" "SETTING" "$1: MEMORY: $MEMORY"
    
    ### BIOS/UEFI
    SETUPSECUREBOOT=0
    if [ "$BIOSTYPE" == "BIOS" ]; then
        FIRMWARE=$BIOS
    elif [ "$BIOSTYPE" == "UEFI" ]; then
       FIRMWARE=$(Set_UEFI $NAME off 0)
    elif [ "$BIOSTYPE" == "SECURE" ]; then
        [ ! -d $VMMGR_DATA_PATH/UEFI/$NAME/ ] && SETUPSECUREBOOT="1"
        FIRMWARE=$(Set_UEFI $NAME on 0)
    elif [ "$BIOSTYPE" == "SECURE4M" ]; then
        [ ! -d $VMMGR_DATA_PATH/UEFI/$NAME/ ] && SETUPSECUREBOOT="1"
        FIRMWARE=$(Set_UEFI $NAME on 1)
    fi
    VMMGR_LOG "$1" "SETTING" "$1: BIOS: $FIRMWARE"
    
    UUID="-uuid "$(Get_Db_UUID $VMMGR_DB_PATH $NAME)
    VMMGR_LOG "$1" "SETTING" "$1: new $UUID"
    
    ### Physical Device ###
    if [ "$PKEYBOARD" ]; then
        PK=$(SET_HID_PHYS $PKEYBOARD)
        VMMGR_LOG "$1" "SETTING" "$1: DECONNECTING keyboard: $PKEYBOARD from the system"
    fi
    if [ "$PMOUSE" ]; then
        PM=$(SET_HID_PHYS $PMOUSE)
        VMMGR_LOG "$1" "SETTING" "$1: DECONNECTING mouse: $PMOUSE from the system"
    fi
    
    PU=""
    if [ "$PUSB" ]; then
        for USBKEY in ${PUSB[@]}; do
            PU="$PU $(SET_USB_STORAGE $USBKEY)"
            VMMGR_LOG "$1" "SETTING" "$1: DECONNECTING USBSTORAGE: $USBKEY from the system"
        done
    fi
    
    PH=""
    if [ "$PHD" ]; then
        HDNUM=0
        for HD in ${PHD[@]}; do
            PH="$PH "$(SET_PHYS_HD $HD $(echo "ibase=10;obase=16;$HDNUM" | bc))
            VMMGR_LOG "$1" "SETTING" "$1: DECONNECTING physical drive $HD from the system"
            HDNUM=$(( $HDNUM + 1 ))
        done
    fi
    
    SU=""
    if [ "$SUSB" ]; then
        for USB in ${SUSB[@]}; do
            SU="$SU "$(SET_USB_PHYS ${SUSB%%|*} ${SUSB##*|})
            VMMGR_LOG "$1" "SETTING" "$1: DECONNECTING USB device: $SUSB from the system"
        done
    fi

    SV=""
    if [ "$NETVF" ]; then
      SV="-device intel-iommu,intremap=off,caching-mode=on,device-iotlb=on,aw-bits=48 "
      for NETIF in ${NETVF[@]}; do
        SV="$SV $(SET_VF_NET $NETIF)"
        VMMGR_LOG "$1" "SETTING" "$1: SRVIO: Adding Virtual Function $NETIF on vm"
      done
    fi
     
    PDEV="$PK $PM $PU $SU $SV"
    unset PKEYBOARD PMOUSE PUSB PHD
    
### TPM2 ###
    if [ "$TPM2" ]; then
        if [ "$VMMGR_TEST" == "TEST" ]; then
            echo "swtpm socket --terminate --daemon --ctrl type=unixio,path=$VMMGR_DATA_PATH/TPM2/$NAME/$NAME.sock --tpmstate dir=$VMMGR_DATA_PATH/TPM2/$NAME/ --tpm2 --log file=$VMMGR_LOG_PATH/$NAME-tpm2.log --seccomp action=kill"
        else
            if [ -d $VMMGR_DATA_PATH/TPM2/$NAME ]; then
                rm -f $VMMGR_DATA_PATH/TPM2/$NAME/*
            else
                mkdir -p $VMMGR_DATA_PATH/TPM2/$NAME/
            fi
            swtpm socket --terminate --daemon --ctrl type=unixio,path=$VMMGR_DATA_PATH/TPM2/$NAME/$NAME.sock --tpmstate dir=$VMMGR_DATA_PATH/TPM2/$NAME/ --tpm2 --log file=$VMMGR_LOG_PATH/$NAME-tpm2.log --seccomp action=kill
        fi
    fi

    ### Ok! Now we can start VM ###
    PIDDIR=/run/VMMGR
    [ -d $PIDDIR ] || PIDDIR=$VMMGR_DATA_PATH
    if [ "$VMMGR_TEST" == "TEST" ]; then
        echo "qemu-system-x86_64 -pidfile $PIDDIR/$NAME -name $NAME $UUID $CORE $MEMORY $FIRMWARE $MAINSEC ${!QEMU_TEMPLATE} ${!SPICETPL} $AUDIO ${!VNCTPL} $QMPTPL $TELNETTPL $NETARRAY $VIRTIODISKS $SCSIDISKS $PH $PDEV"
    else
        VMMGR_LOG "$1" "SETTING" "$1: all done, starting!"
        qemu-system-x86_64 -pidfile $PIDDIR/$NAME -name $NAME $UUID $CORE $MEMORY $FIRMWARE $MAINSEC ${!QEMU_TEMPLATE} $NETARRAY ${!SPICETPL} $AUDIO ${!VNCTPL} $QMPTPL $TELNETTPL $VIRTIODISKS $SCSIDISKS $PH $PDEV
        
        sleep 1
        
        if [ "$VNCPWD" != "" ] && [ "$(echo  ${!VNCTPL} | grep "password")" != "" ] ; then
            VMMGR_LOG "$1" "PASSWD" "Setting VNC password"
            ### VNC PASSWORD ###
            if [ "$VNC" == "on" ]; then
                if [ "$TELNET" == "on" ]; then
                    TIP=${TELNETTPL##*monitor telnet:}
                    TIP=${TIP%%,server,nowait}
                    { echo "  set_password vnc $VNCPWD"; sleep 1; } | telnet ${TIP%:*} ${TIP##*:}
                elif [ "$QMP" == "on" ]; then
                    TIP=${QMPTPL##*chardev socket,id=qmp01,host=}
                    TIP=${TIP%%,server,nowait*}
                    { echo '{ "execute": "qmp_capabilities" } { "execute": "set_password vnc $VNCPWD" }'; sleep 1; } | telnet ${TIP%%,*} ${TIP##*port=}
                fi
            fi
        fi
        
        ### Checking if vm is running ###
        if [ "$TELNET" == "on" ]; then
            TIP=${TELNETTPL##*monitor telnet:}
            TIP=${TIP%%,server,nowait}
            { echo "  info status"; sleep 1; } | telnet ${TIP%:*} ${TIP##*:}
        elif [ "$QMP" == "on" ]; then
            TIP=${QMPTPL##*chardev socket,id=qmp01,host=}
            TIP=${TIP%%,server,nowait*}
            { echo '{ "execute": "qmp_capabilities" } { "execute": "query-status" }'; sleep 1; } | telnet ${TIP%%,*} ${TIP##*port=}
        fi
        
        ### Load Install DVD and reset
        INSERTDVD=$(cat $2 | grep '^INSTALLISO' | cut -d= -f2 | tr -d \" )
        VMMGR_LOG "$1" "SETTING" "loading iso: $INSERTDVD"
        if [ "$INSERTDVD" ]; then
             $VMMGR_PATH/VMMgr_Launcher load $NAME $INSERTDVD reset
             sed -i -e 's/\(^INSTALLISO=.*$\)/#\1/' $2
        else
            INSERTDVD=$(cat $2 | grep '^PERMANENTISO' | cut -d= -f2 | tr -d \" )
            if [ "$INSERTDVD" ]; then
                $VMMGR_PATH/VMMgr_Launcher load $NAME $INSERTDVD reset
                sed -i -e 's/\(^INSTALLISO=.*$\)/#\1/' $2
            fi
        fi
        
        ### connecting differed USB devices
        if [ "${#DUSB[@]}" ]; then
            MAXWAITING=0;
            for USB in ${DUSB[@]}; do
                #CURWAITING=${USB##*|};
                CURWAITING=$(echo $USB | awk -F \| '{print $2}')
                if [ $CURWAITING -gt $MAXWAITING ]; then MAXWAITING=$CURWAITING; fi;
            done;
            echo "Connecting ${#DUSB[@]} devices in $MAXWAITING seconds";
            echo -n "Waiting";
            for WAITING in $(seq 1 $MAXWAITING); do
                echo -n ".";
                for USB in ${DUSB[@]}; do  
                    #declare -i CURWAITING=${USB##*|};
                    declare -i CURWAITING=$(echo $USB | awk -F \| '{print $2}')
                    if [ "$CURWAITING" == "$WAITING" ]; then
                        if [ "$TELNET" == "on" ]; then
                            echo -e "\nWaiting";
                            TIP=${TELNETTPL##*monitor telnet:}
                            TIP=${TIP%%,server,nowait}
                            #{ echo "  $(SET_DIF_USB ${USB%%|*})"; sleep 1; } | telnet ${TIP%:*} ${TIP##*:}
                            { echo "  $(SET_DIF_USB $(echo $USB | awk -F \| '{print $1}') $(echo $USB | awk -F \| '{print $3}') )"; sleep 1; } | telnet ${TIP%:*} ${TIP##*:}
                            echo -n "Waiting";
                        elif [ "$QMP" == "on" ]; then
                            echo -e "\nWaiting";
                            TIP=${QMPTPL##*chardev socket,id=qmp01,host=}
                            TIP=${TIP%%,server,nowait*}
                            #{ echo '{ "execute": "qmp_capabilities" } { "execute": "$(SET_DIF_USB ${USB%%|*})" }'; sleep 1; } | telnet ${TIP%%,*} ${TIP##*port=}
                            { echo '{ "execute": "qmp_capabilities" } { "execute": "$(SET_DIF_USB $(echo $USB | awk -F \| '{print $1}') $(echo $USB | awk -F \| '{print $3}') )" }'; sleep 1; } | telnet ${TIP%%,*} ${TIP##*port=}
                            echo -n "Waiting";
                        fi;
                    fi;
                done;
                sleep 1;
            done;
        fi
        if [ "$USBMONITOR" == "yes" ]; then
            $VMMGR_PATH/VMMgr_Launcher usb-daemon $1
        fi
    fi
}

# Function VM_Is_Running
# Description: check if vm is running
# Args:
#   $1: VM name
function VM_Is_Running() {
    [ -f "/run/VMMGR/$1" ] && PIDFILE="/run/VMMGR/$1"
    [ -f "$VMMGR_DATA_PATH/$1" ] && PIDFILE="$VMMGR_DATA_PATH/$1"
    if [ "$PIDFILE" == "" ]; then
        echo 0
    else
        Result=$(ps -h -q $(sudo cat $PIDFILE) -o pid)
        if [ "${Result##* }" == "$(sudo cat $PIDFILE)" ]; then
            echo 1
        else
            echo 0
        fi
    fi
}

# Function: List_All_VM
# Description: Get the list of VMs
# Args:
#   $1: [all|running|stopped|enabled|disabled]
function List_All_VM() {
    case "$1" in
            "all")
                VMS=$(Db_List_VMs $VMMGR_DB_PATH)
                for VM in $VMS; do
                    edb="disabled"; esys="disabled"; isrun="stopped"
                    Enabled=$(Db_isEnabled_VM $VMMGR_DB_PATH $VM)
                    if [ "$Enabled" == "1" ]; then
                        edb="enabled"
                    fi
                    systemctl --quiet is-enabled $VM 2>/dev/null
                    if [ $? -eq 0 ]; then
                       esys="enabled"
                    fi
                    if [ "$(VM_Is_Running $VM)" == 1 ]; then
                      isrun="running"
                    fi
                    echo "$VM: $edb(DB), $esys(systemd): $isrun"
                done
            ;;
            "running")
                VMS=$(Db_List_VMs $VMMGR_DB_PATH)
                for VM in $VMS; do
                    Running=$(VM_Is_Running $VM)
                    if [ "$Running" == "1" ]; then
                        echo $VM
                    fi
                done
            ;;
            "enabled")
                Db_Filter_VMs $VMMGR_DB_PATH Enabled 1
                
            ;;
            "stopped")
                VMS=$(Db_List_VMs $VMMGR_DB_PATH)
                for VM in $VMS; do
                    Running=$(VM_Is_Running $VM)
                    if [ "$Running" == "0" ]; then
                        echo $VM
                    fi
                done
            ;;
            "disabled")
                Db_Filter_VMs $VMMGR_DB_PATH Enabled 0
            ;;
    esac
}

# Function: VM_Delete
# Description: Delete a vm
# Args:
#   $1: VM Name
#   $2: VM config file
#   $3: =$3 from VMMgr_Launcher command
function VM_Delete() {
    for i in $(echo $3 | tr \- \  ); do
        case $i in
            "db")
                VMMGR_LOG "$2" "DELETE" "Deleting $1 in database"
                Db_Delete_VM $VMMGR_DB_PATH $1
            ;;
            "conf")
                VMMGR_LOG "$2" "DELETE" "Deleting $1 config files"
                rm $VMMGR_DATA_PATH/VM_CONFIGS/$2
            ;;
            "disks")
                VMMGR_LOG "$2" "DELETE" "Deleting vm $1 disks"
                if [ ! -r $VMMGR_DATA_PATH/VM_CONFIGS/$2 ]; then
                    echo "Missing Config, cannot find disks"
                else
                    . $VMMGR_DATA_PATH/VM_CONFIGS/$2
                    if [ "$Virtio_Disk" ]; then
                        export Virtio_Disk
                        DisksList=$(Set_Disks $NAME 1)
                        for Disk in $(echo $DisksList | tr \|  \  ); do
                            rm $Disk
                        done
                        unset Virtio_Disk
                    fi
                    if [ "$Scsi_Disk" ]; then
                        export Scsi_Disk
                        DisksList=$(Set_SDisks $NAME)
                        for Disk in $(echo $DisksList | tr \|  \  ); do
                            rm $Disk
                        done
                        unset Scsi_Disk
                    fi
                fi
            ;;
        esac
    done
}


# Function set_DNS()
# Description: register vm name with IP
# Args:
#   $1: Name: can be vm name, a bridge name, or any arbitrary name
#   $2: action (add|remove)
#   $3: IP
function set_DNS() {
    # 1) on a 2 variables:
    #   DNSUPDATE : il faut qu'on fasse un dns update. on va pas l'implémenter pour le moment
    #   HOSTS: on doit créer une entrée dans /etc/hosts. Prévoir que la fonction delete devra l'enlever.
    # on doit savoir quoi inscrire: quel service? on va avoir un problème si on doit enregistrer telnet et spice avec 2 ip différentes. donc on doit penser à ça
    if [ "${HOSTS^^}" == "YES" ]; then
        ENTRY="$3 $1"
        if [ "$(egrep "^$ENTRY$" /etc/hosts)" ]; then
            EXIST=1
        else
            EXIST=0
        fi
        
        if [ "$2" == "add" ] && [ $EXIST -eq 0 ]; then
            VMMGR_LOG "VMMGR" "DNS" "Adding to /etc/hosts: $3 $1"
            echo $ENTRY | sudo tee -a /etc/hosts
        fi
        if [ "$2" == "remove" ] && [ $EXIST -eq 1 ]; then
            VMMGR_LOG "VMMGR" "DNS" "Removing from /etc/hosts: $3 $1"
            sudo sed -i -e "/^$ENTRY$/d" /etc/hosts
        fi
    fi
    if [ "${NSUPDATE^^}" == "YES" ]; then
        echo "not implemented, please update manually: $3 $1"
    fi
}
# Set_SSH: Set ssh access

# Function get_DNS
# Description: find any existing entry in DNS/hosts
# Args:
#   $1: Name
#   $2: IP
function get_DNS() {
    if [ "${HOSTS^^}" == "YES" ]; then
        ENTRY="$2 $1"
        if [ "$(egrep "^$ENTRY$" /etc/hosts)" ]; then
            EXIST=1
        else
            EXIST=0
        fi
        echo $EXIST
    fi
    if [ "${NSUPDATE^^}" == "YES" ]; then
        echo "not implemented, please update manually: $3 $1"
    fi
}

# Function: Set_SSH
# Description: Set ssh access
# Args:
#   $1: vm name
#   $2: action (set|update|delete)
#   $3: IP
#   $4: hostname (optional, use vmname if not provided)
#   $5: optionals hostname?
function Set_SSH() {
    case $2 in
        "set")
            Db_Set_SSH $VMMGR_DB_PATH $1 $3 ${4-$1}
            set_DNS ${4-$1} add $3
            ;;
        "update")
            OLDSSH=$(Db_Get_SSH $VMMGR_DB_PATH $1)
            NEWNAME=""
            if [ "$4" ]; then 
                NEWNAME=$4;
            elif [ "${OLDSSH#*|}" ]; then 
                NEWNAME=${OLDSSH#*|};
            else
                NEWNAME=$1
            fi
            
            if [ "$OLDSSH" != "" ]; then 
                Db_Delete_SSH $VMMGR_DB_PATH $1
            fi
            Db_Set_SSH $VMMGR_DB_PATH $1 $3 $NEWNAME
            
            if [ "$(get_DNS ${OLDSSH#*|} ${OLDSSH%|*})" == "1" ]; then
                set_DNS ${OLDSSH#*|} remove ${OLDSSH%|*}
            fi
            
            set_DNS $NEWNAME add $3
            ;;
        "delete")
            OLDSSH=$(Db_Get_SSH $VMMGR_DB_PATH $1)
            Db_Delete_SSH $VMMGR_DB_PATH $1
            set_DNS ${OLDSSH#*|} remove ${OLDSSH%|*}
            ;;
        *)
            echo "ssh subcommand syntax error"
            ;;
    esac
}
