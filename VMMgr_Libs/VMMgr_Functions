#! /bin/bash
#
# script name: VMMgr_Functions
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.04
# description: All usefull functions
#
# Functions:
# Check_Softwares: try to check if all required software are installed
# Check_System: Check system requirements
# Check_MEM: calculate and/or check MEM and MAXMEM
# Set_UEFI: Create UEFI firmware
# Set_IPMI: Create IPMI device, using OpenIPMI-lanserv 
# Custom_VM_Config: Customize VM Configuration
# Set_Remote_Viewer: Create .vv file for remove viewer
# Start_VM_From_Config: Start VM using VM Config file
# Install_VMMGR: Install VMMGR on the system
# Uninstall_VMMGR: Remove VMMGR from the system
# VM_Is_Running: check if vm is running
# List_All_VM: Get the list of VMs

# Function Check_Softwares
# Description: try to check if all packaged are installed or not
# Args:
#   $1: Software List
#   $2: (bool) Not Installed=0, Installed=1 
function Check_Softwares() {
    TOBEINSTALL=""
    PACKAGENEEDED=$(echo $1 | tr \|  \   )
    for PACKAGE in $(echo $PACKAGENEEDED); do
        if [ "$(rpm -qa $PACKAGE)" == "" ]; then
            TOBEINSTALL="$TOBEINSTALL $PACKAGE"
        else
            INSTALLED="$PACKAGE"
        fi
    done
    if [ $2 -eq 0 ]; then
        echo $TOBEINSTALL
    else
        echo $INSTALLED
    fi
}

# Function: Check_Requirements
# Description: Helper for hypervisor configuration
# Args: no
function Check_Requirements() {
    echo "Checking..."
    echo ""
    PACKAGES=$(Check_Softwares "qemu-system-x86|sqlite edk2-ovmf|virt-viewer" 0)
    if [ "$PACKAGES" ]; then
        echo "You must install the following packages: $PACKAGES"
        echo ""
    fi
    PACKAGES=$(Check_Softwares "NetworkManager|openvswitch|virglrenderer|dpdk" 0)
    if [ "$PACKAGES" ]; then
        echo "You can install the following optionals packages: $PACKAGES"
        echo ""
    fi
    PACKAGES=$(Check_Softwares "ulatencyd" 1)
    if [ "$PACKAGES" ]; then
        echo "You should delete following packages: $PACKAGES"
        echo ""
    fi
    
    if [ "$(getent group qemu)" == "" ]; then
        echo "You must create group 'qemu'"
        echo "kvm user must in this group too"
        echo ""
    fi
    
    echo "Sudoers: You must ensure the following rules ares set:"
    echo "Cmnd_Alias VMMGRCMD= /usr/sbin/ip, /usr/sbin/brctl, /usr/bin/ovs-vsctl, /usr/bin/nmcli, /usr/sbin/setcap"
    echo "%qemu ALL=(root:root) NOPASSWD: VMMGRCMD"
    echo ""
    
    ISOPATH=$(sudo -u qemu ls -l $VMMGR_ISO_PATH 2>/dev/null)
    if [ "$ISOPATH" == "" ]; then
        echo "If you plan to use systemd, you ISO PATH ($VMMGR_ISO_PATH) must be readable by qemu user"
        echo ""
    fi
    
    echo "DISKPATH: if you plan to use systemd, your DISKPATH var in your VM configs must be readable by qemu user"
    echo ""
    
    for KERNELOPT in $(echo "nodelayacct transparent_hugepage=madvise elevator=deadline kvm-intel.nested=1 iommu=1 intel_iommu=on kvm-intel.ept=1"); do
        if [ "$(cat /proc/cmdline | grep $KERNELOPT)" == "" ]; then
            OPTIONS="$OPTIONS $KERNELOPT"
        fi
    done
    if [ "$OPTIONS" ]; then
        echo "You should add the following kernel options in your grub.cfg:"
        echo $OPTIONS
        echo ""
    fi

    if [ "$(tuned-adm list | grep hypervisor)" == "" ]; then
        echo "You should install tuned profile provided by copying Configs/tuned.conf in /etc/tuned/hypervisor/"
        echo ""
    fi
    
    if [ "$(tuned-adm active | grep hypervisor)" == "" ]; then
        echo "tuned profile hypervisor is not active!"
        echo ""
    fi
}

# Function: Check_System
# Description: Check system requirements
# Args: no args
# Steps:
#   1: Check module vhost-net
#   2: Check perms on /dev/net/tun, /dev/vhost-net and /dev/kvm
#   3: Set cap_net_admin on qemu-system_x86_64
function Check_System() {
    if [ "$(modinfo vhost-net -F intree)" != "Y" ]; then
        sudo modprobe vhost vhost-net
    fi
    
    ls -l /dev/net/tun | cut -d\  -f1 | grep 'crw-rw-rw-' > /dev/null
    if [ $? -ne 0 ]; then
        sudo chmod 0666 /dev/net/tun
    fi

    ls -l /dev/vhost-net | cut -d\  -f1 | grep 'crw-rw-rw-' > /dev/null
    if [ $? -ne 0 ]; then
        sudo chmod 0666 /dev/vhost-net
    fi

    ls -l /dev/kvm | cut -d\  -f1 | grep 'crw-rw-rw-' > /dev/null
    if [ $? -ne 0 ]; then
        sudo chmod 0666 /dev/kvm
    fi

    getcap /usr/bin/qemu-system-x86_64 | grep cap_net_admin+ep > /dev/null
    if [ $? -ne 0 ]; then
        sudo setcap cap_net_admin+ep /usr/bin/qemu-system-x86_64
    fi
    
    # On a besoin de voir comment faire dans sudo pour que Ã§a fonctionne
    #if [ $(cat /proc/sys/net/ipv4/ip_forward) -eq 0 ]; then
        #sudo echo 1 > /proc/sys/net/ipv4/ip_forward
    #fi
    
    modinfo openvswitch 2>/dev/null 1>/dev/null
    if [ $? -eq 0 ]; then
        sudo modprobe openvswitch
        [ -d /var/run/openvswitch ] || sudo mkdir /var/run/openvswitch
    fi
}


# Function Check_MEM
# Description: Check if MEM and MAXMEM
# if MAXMEM is undefined, calculate MEM * 2
# Args:
#   $1: $MEM
#   $2: $MAXMEM
#   $3: Max Slots (optional)
function Check_MEM() {
 [ "$1" ] || return 0
 MAXSYS=$(( $(grep "MemTotal: " /proc/meminfo  | awk '{print $2}' ) / 1024 / 1024 ))
 if [ $1 -gt $MAXSYS ]; then MEM=$MAXSYS; else MEM=$1; fi
 if [ ! "$2" ]; then 
    MAXMEM=$(( $MEM * 2 ));
 elif [ $2 -gt $MAXSYS ]; then
    MAXMEM=$MAXSYS
 else 
    MAXMEM=$2
 fi
 if [ $3 ]; then SLOT=$3; else SLOT=1; fi
 if [ $MEM -eq $MAXMEM ]; then
    echo "-m "$MEM"G"
 else
    echo "-m "$MEM"G,slots=$SLOT,maxmem=$MAXMEM""G"
 fi
}

# Function: Set_UEFI
# Description: Create UEFI firmware
# Args:
#   $1: VM Name
#   $2: (bool) Secure boot
function Set_UEFI() {
    SECURE=""
    [ "$2" == "on" ] && SECURE=".secboot"
        
    if [ ! -d $VMMGR_DATA_PATH/UEFI/$NAME/ ]; then 
        mkdir -p $VMMGR_DATA_PATH/UEFI/$NAME/
        cp $(rpm -ql edk2-ovmf | grep OVMF_VARS$SECURE.fd | head -1) $VMMGR_DATA_PATH/UEFI/$NAME/
        touch $VMMGR_DATA_PATH/UEFI/$NAME/OVMF_LOG.log
        sudo chown -R qemu:qemu $VMMGR_DATA_PATH/UEFI/$NAME/
        sudo chmod 660 $VMMGR_DATA_PATH/UEFI/$NAME/*
    fi
    echo "-drive if=pflash,format=raw,readonly=on,file=$(rpm -ql edk2-ovmf | grep OVMF_CODE$SECURE.fd | head -1) -drive if=pflash,format=raw,file=$VMMGR_DATA_PATH/UEFI/$NAME/OVMF_VARS$SECURE.fd -global isa-debugcon.iobase=0x402 -debugcon file:$VMMGR_DATA_PATH/UEFI/$NAME/OVMF_LOG.log"
}

# Function: Set_IPMI
# Description: Create IPMI device, using OpenIPMI-lanserv 
# Args:
#   $1: Vm Name
#   $2: IPMI Template Path
#   $3: IPMI Address
#   $4: IPMI Port
function Set_IPMI() {
  if [ ! -f /etc/ipmi/$2.conf ]; then
    cp $2 /etc/ipmi/$1.conf
    sed -i "s/%%IPMIADDR%%/$3/" /etc/ipmi/$1.conf
    sed -i "s/%%IPMIPORT%%/$4/" /etc/ipmi/$1.conf
    sed -i "s/%%NAME%%/$1/g" /etc/ipmi/$1.conf
  fi
}

# Function : Check_Existing_VM
# Description: Check on DB if VM already exists
# Args:
#   $1: VM Name
function Check_Existing_VM() {
 Set_Db $VMMGR_DB_PATH
 Db_Get_VM_Config $VMMGR_DB_PATH $1
}

# Function: Custom_VM_Config
# Description: Customize VM Configuration
# Args:
#   $1: VM name
#   $2: VM config path
function Custom_VM_Config() {
    sed -i "s/%%NAME%%/$1/g" $2
}

# Function: Set_Remote_Viewer
# Description: Create .vv file for remove viewer
# Args:
#   $1: Type (spice,vnc)
#   $2: TEMPLATENAME
#   $3: VM Name
#   $4: Spice_IP_PORT ($IPPORT)
#   $5: SPICE Password
function Set_Remote_Viewer() {
    CFGPATH=$VMMGR_DATA_PATH/R-${1^^}/$3
    cp $VMMGR_DATA_PATH/R-${1^^}/$2 $CFGPATH
    sed -i "s/%%NAME%%/$3/g" $CFGPATH
    sed -i "s/%%PWD%%/$5/g" $CFGPATH
    
    CERTNAME=$(cat $CFGPATH | grep host-subject); CERTNAME=${CERTNAME#*CN=}; CERTNAME=${CERTNAME%%,*}
    
    NAMEDHOST=$(cat /etc/hosts | grep ${4%|*} | awk '{print $2}' | head -1);
    if [ "$NAMEDHOST" = "" ]; then
        NAMEDHOST=$(dig -x ${4%|*} | grep -v ";" | grep -v "^$" | head -1)
        NAMEDHOST=${NAMEDHOST##*PTR }
        if [ "$NAMEDHOST" = "" ]; then
            echo "Warning: no Hostname found matching IP: ${4%|*}"
        fi
    fi
    if [ "$CERTNAME" == "$NAMEDHOST" ]; then
        sed -i "s/%%HOSTNAME%%/$CERTNAME/g" $CFGPATH
    elif [ "$NAMEDHOST" != "" ]; then
        sed -i "s/%%HOSTNAME%%/$NAMEDHOST/g" $CFGPATH
    else
        sed -i "s/%%HOSTNAME%%/${4%|*}/g" $CFGPATH
    fi
    sed -i "s/%%PORT%%/${4#*|}/g" $CFGPATH
}

# Function VMMGR_LOG
# Description: log in /var/log/VMMGR/VMMgr.log
# Args:
#   $1: VM name
#   $2: Action
#   $3: Message
# TODO:
#      Utiliser journald
function VMMGR_LOG() {
    VMNAME=$1
    VMPROC=""
    if [ -r /var/run/VMMGR/VMMGR-$1 ]; then
        VMPROC=$(cat /proc/VMMGR/VMMGR-$1)
    fi
    VMMGRPROC=$$
    CDATE=$(date '+%A %d-%m-%Y %T')
    
    if [ "$VMNAME" == "VMMGR" ]; then
        echo "$CDATE VMMgr: [$2] pid=$VMMGRPROC msg=$3" >> /var/log/VMMgr/VMMgr.log
    else
        [ -w /var/log/VMMgr/$VMNAME-log ] ||  touch /var/log/VMMgr/$VMNAME-log
        echo "$CDATE VMMgr: [$2] pid=$VMPROC msg=$3" >> /var/log/VMMgr/$VMNAME-log
    fi
}

# Function: Start_VM_From_Config
# Description: Start VM using VM Config file
#               Here, we create many things
# Args:
#   $1: VM Name
#   $2: VM config path
function Start_VM_From_Config() {
    echo "starting $1"
    if [ -r /etc/VMMGR/VMMgr_.conf ]; then
        . /etc/VMMGR/VMMgr_.conf
    elif [ -r $(dirname $0)/VMMgr_.conf ]; then
        . $(dirname $0)/VMMgr_.conf
    else
        echo "No config VMMgr_.conf found, abording..."
        return
    fi
    . $VMMGR_DATA_PATH/DATA/VMMgr_Devices
    Get_Bridge_Tool
    
    ### SPICE ###
    . $VMMGR_DATA_PATH/DATA/VMMgr_Spice
    . $2
    if [ "$SPICE" == "on" ]; then
        IPPORT=$(Set_Service_Listen $SPICEIP $SPICEIPVER $SPICETYPE $NAME spice $SPICEPORT)
        SPICEIP=${IPPORT%|*}; SPICEPORT=${IPPORT#*|}
        . $VMMGR_DATA_PATH/DATA/VMMgr_Spice
        Set_Remote_Viewer spice $SPICETPL $NAME $IPPORT $SPICEPWD
    else
        SPICETPL=TPLNULL
    fi
    
    ### TELNET MONITOR ###
    if [ "$TELNET" == "on" ]; then
        IPPORT=$(Set_Service_Listen $TELNETIP $TELNETIPVER $TELNETTYPE $NAME telnet $TELNETPORT)
        TELNETTPL="-monitor telnet:$(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}'):${IPPORT#*|},server,nowait"
    else
        TELNETTPL=""
    fi

    ### VNC ###
    if [ "$VNC" == "on" ]; then
        . $VMMGR_DATA_PATH/DATA/VMMgr_VNC
        . $2
        IPPORT=$(Set_Service_Listen $VNCIP $VNCIPVER $VNCTYPE $NAME vnc $VNCPORT)
        VNCIP=$(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}'); VNCPORT=${IPPORT#*|}
        . $VMMGR_DATA_PATH/DATA/VMMgr_VNC
        echo "Remote Viewer with x509 do not work, please use another vnc viewer like Remina"
        Set_Remote_Viewer vnc $VNCTPL $NAME $IPPORT $VNCPWD
    else
        VNCTPL=TPLNULL
    fi
    
    ### QMP MONITOR ###
    if [ "$QMP" == "on" ]; then
        IPPORT=$(Set_Service_Listen $QMPIP $QMPIPVER $QMPTYPE $NAME qmp $QMPPORT)
        QMPTPL="-chardev socket,id=qmp01,host=$(ip -br a s | grep ${IPPORT%|*} | awk '{print $1}'),port=${IPPORT#*|},server,nowait -mon chardev=qmp01,mode=control,pretty=on"
    else
        QMPTPL=""
    fi

    ### Virtio NETWORK ###
    . $VMMGR_DATA_PATH/DATA/VMMgr_VirtioNet
    
    declare -i NUMDEV=0
    for NET in $(echo $NETWORKDEVICE); do
        NETARRAY="$NETARRAY $(Set_NetDev $NAME ${NET%|*} ${NET#*|} "$NETDEV" "$DEVICE" $NUMDEV)"
        NUMDEV=$(( $NUMDEV + ${NET#*|} ))
    done
    
    ### Virtio Disks ###
    if [ "$Virtio_Disk" ]; then
        export Virtio_Disk
        DisksList=$(Set_Disks $NAME)
        VIRTIODISKS=$(Set_Virtio_Disks $NAME $IOTHREADS $DisksList)
        unset Virtio_Disk
    fi
    
    ### SCSI Disks ###
    if [ "$Scsi_Disk" ]; then
        export Scsi_Disk
        DisksList=$(Set_SDisks $NAME)
        SCSIDISKS=$(Set_Scsi_Disks $NAME $DisksList)
        unset Scsi_Disk
    fi
    
    ### CPU/SMP/NUMA/MACHINE ###
    . $VMMGR_DATA_PATH/DATA/VMMgr_CPU
    CORE="-machine ${!MACHINETPL} ${!SMPTPL} -cpu ${!CPU}"
    MEMORY=$(Check_MEM $MEM $MAXMEM $SLOT)
    
    ### BIOS/UEFI
    SETUPSECUREBOOT=0
    if [ "$BIOSTYPE" == "BIOS" ]; then
        FIRMWARE=$BIOS
        echo "BIOS=$FIRMWARE"
    elif [ "$BIOSTYPE" == "UEFI" ]; then
       FIRMWARE=$(Set_UEFI $NAME)
    elif [ "$BIOSTYPE" == "SECURE" ]; then
        [ ! -d $VMMGR_DATA_PATH/UEFI/$NAME/ ] && SETUPSECUREBOOT="1"
        FIRMWARE=$(Set_UEFI $NAME on)
    fi
    
    UUID="-uuid "$(Get_Db_UUID $VMMGR_DB_PATH $NAME)
    
    ### Ok! Now we can start VM ###
    if [ "$VMMGR_TEST" == "TEST" ]; then
        echo "qemu-system-x86_64 -pidfile /var/run/VMMGR/$NAME -name $NAME $UUID $CORE $MEMORY $FIRMWARE ${!QEMU_TEMPLATE} ${!SPICETPL} ${!VNCTPL} $QMPTPL $TELNETTPL $NETARRAY $VIRTIODISKS $SCSIDISKS -writeconfig $VMMGR_DATA_PATH/QEMU_CONFIGS/$NAME"
    else
        WCONFIG="-writeconfig $VMMGR_DATA_PATH/QEMU_CONFIGS/$NAME"
        qemu-system-x86_64 -pidfile /var/run/VMMGR/$NAME -name $NAME $UUID $CORE $MEMORY $FIRMWARE ${!QEMU_TEMPLATE} $NETARRAY ${!SPICETPL} ${!VNCTPL} $QMPTPL $TELNETTPL $VIRTIODISKS $SCSIDISKS $WCONFIG
        
        sleep 1
        
        # Fix Duplicated ID compat_monitor0 #
        sed -i 's/compat_monitor0/compat_monitor1/g' $VMMGR_DATA_PATH/QEMU_CONFIGS/$NAME
        
        # insert missing options, the following options are not included in the config:
        # pidfile, uuid, display, soundhw, daemonize, no-user-config, nodefaults
        # we add uuid and display as comments
        
        DISPLAY=${!QEMU_TEMPLATE}; DISPLAY=${DISPLAY##*-display}; DISPLAY=${DISPLAY%%-*}
        if [ "$DISPLAY" != "" ]; then ADDED="# display $DISPLAY\n"; fi
        SOUND=${!QEMU_TEMPLATE}; SOUND=${SOUND##*-soundhw}; SOUND=${SOUND%%-*}
        if [ "$SOUND" != "" ]; then ADDED="$ADDED# soundhw $SOUND\n"; fi
        sed -i -e "s/^\(\# qemu config file\)$/\1\n$ADDED/" $VMMGR_DATA_PATH/QEMU_CONFIGS/$NAME
        
        
        ### VNC PASSWORD ###
        if [ "$VNC" == "on" ]; then
            if [ "$TELNET" == "on" ]; then
                TIP=${TELNETTPL##*monitor telnet:}
                TIP=${TIP%%,server,nowait}
                { echo "set_password vnc $VNCPWD"; sleep 1; } | telnet ${TIP%:*} ${TIP##*:}
            elif [ "$QMP" == "on" ]; then
                TIP=${QMPTPL##*chardev socket,id=qmp01,host=}
                TIP=${TIP%%,server,nowait*}
                { echo '{ "execute": "qmp_capabilities" } { "execute": "set_password vnc $VNCPWD" }'; sleep 1; } | telnet ${TIP%%,*} ${TIP##*port=}
            fi
        fi
        
        ### Checking if vm is running ###
        if [ "$TELNET" == "on" ]; then
            TIP=${TELNETTPL##*monitor telnet:}
            TIP=${TIP%%,server,nowait}
            { echo "info status"; sleep 1; } | telnet ${TIP%:*} ${TIP##*:}
        elif [ "$QMP" == "on" ]; then
            TIP=${QMPTPL##*chardev socket,id=qmp01,host=}
            TIP=${TIP%%,server,nowait*}
            { echo '{ "execute": "qmp_capabilities" } { "execute": "query-status" }'; sleep 1; } | telnet ${TIP%%,*} ${TIP##*port=}
        fi
        
        ### Load Install DVD and reset
        INSERTDVD=$(cat $2 | grep '^INSTALLISO' | cut -d= -f2 | tr -d \" )
        if [ "$INSERTDVD" ]; then
             $VMMGR_PATH/VMMgr_Launcher load $NAME $INSERTDVD reset
             sed -i -e 's/\(^INSTALLISO=.*$\)/#\1/' $2
        fi
    fi
}

# Function: Install_VMMGR
# Description: Install VMMGR on the system
# Args: None
function Install_VMMGR() {
    # /etc/VMMGR/ and main config VMMgr_.conf
    if [ ! -d /etc/VMMGR/ ]; then
        mkdir /etc/VMMGR
        cp -r $(pwd)/VMMgr_.conf /etc/VMMGR/ && chown -R qemu:qemu /etc/VMMGR
        sed -i 's/^\(\VMMGR_.*\)$//g' /etc/VMMGR/VMMgr_.conf
        sed -i 's/^#\(\VMMGR_.*\)$/\1/g' /etc/VMMGR/VMMgr_.conf
    fi
    # /var/lib/VMMGR/
    [ -d /var/lib/VMMGR/ ] || mkdir -p /var/lib/VMMGR/{DB,ISO}
    cp -r $(pwd)/{Configs,DATA,DB_BKP,QEMU_CONFIGS,R-SPICE,R-VNC,TAPSCRIPTS,Templates,UEFI,VM_CONFIGS} /var/lib/VMMGR/ && chown -R qemu:qemu /var/lib/VMMGR && chmod -R 770 /var/lib/VMMGR
    
    # Main program
    cp $(pwd)/VMMgr_Launcher /usr/local/bin/ && chown qemu:qemu /usr/local/bin/VMMgr_Launcher && chmod 0650 /usr/local/bin/VMMgr_Launcher
    
    # Libs
    cp -r $(pwd)/VMMgr_Libs/VMMgr_* /usr/local/lib/ && chown qemu:qemu /usr/local/lib/VMMgr_* && chmod 0650 /usr/local/lib/VMMgr_*
    
    # DB
    [ -r $(pwd)/VMMGR_.db ] && cp -r $(pwd)/VMMGR_.db /var/lib/VMMGR/DB/ && chown qemu:qemu /var/lib/VMMGR/DB/VMMGR_.db && chmod 0660 /var/lib/VMMGR/DB/VMMGR_.db
    
    # /var/run/VMMGR
    if [ ! -d /var/run/VMMGR ]; then
        mkdir /var/run/VMMGR && chown -R qemu:qemu /var/run/VMMGR && chmod -R 770 /var/run/VMMGR
    fi
    
    # /var/log/VMMGR
    if [ ! -d /var/log/VMMgr ]; then
        mkdir /var/log/VMMgr
        touch /var/log/VMMgr/VMMgr.log
        chown -R qemu:qemu /var/log/VMMgr
        chmod 770 /var/log/VMMgr
        chmod 660 /var/log/VMMgr
    fi
    VMMGR_LOG "VMMGR" "INSTALL" "VMMgr is installed on your system."
}

# Function: Uninstall_VMMGR
# Description: Remove VMMGR from the system
# Args: None
function Uninstall_VMMGR() {
    # DB
    if [ -r /var/lib/VMMGR/DB/VMMGR_.db ]; then
        echo "Before Uninstall, do you want to save your DB? [Y/n]"; read answer
        if [ "${answer^^}" == "Y" ] || [  "$answer" == "" ]; then
            cp /var/lib/VMMGR/DB/VMMGR_.db ~/VMMgr_.db.bkp$(date --iso)
            echo "VMMGR_.db saved to: ~/VMMgr_.db.bkp$(date --iso)"
        fi
        rm /var/lib/VMMGR/DB/VMMGR_.db
    fi
    # DB Backups
    if [ "$(ls -I README.md /var/lib/VMMGR/DB_BKP)" != "" ]; then
        echo "Do you want to save you DB backup? [y/N]"; read answer
        if [ "${answer^^}" == "Y" ]; then
            cp -r /var/lib/VMMGR/DB_BKP ~/VMMgr_.DB_BKP
            echo "DB backups saved to: ~/DB_BKP"
        fi
    fi
    
    rm /usr/local/bin/VMMgr_Launcher
    rm /usr/local/lib/VMMgr_{CPUs,Db,Disks,Functions,Networks}
    VMMGR_LOG "VMMGR" "UNINSTALL" "VMMgr is installed on your system except:"
    VMMGR_LOG "VMMGR" "UNINSTALL" "/etc/VMMGR directory will not be deleted"
    VMMGR_LOG "VMMGR" "UNINSTALL" "/var/lib/VMMGR, VM configs and templates will not be deleted"
}

# Function VM_Is_Running
# Description: check if vm is running
# Args:
#   $1: VM name
function VM_Is_Running() {
    if [ -r "/var/run/VMMGR/$1" ]; then
        Result=$(ps -h -q $(cat /var/run/VMMGR/$1) -o pid)
        if [ "${Result# }" == "$(cat /var/run/VMMGR/$1)" ]; then
            echo 1
        else
            echo 0
        fi
    else
        echo 0
    fi
}

# Function: List_All_VM
# Description: Get the list of VMs
# Args:
#   $1: [all|running|stopped|enabled|disabled]
function List_All_VM() {
    case "$1" in
            "all")
                edb="disabled"; esys="disabled"; isrun="stopped"
                VMS=$(Db_List_VMs $VMMGR_DB_PATH)
                for VM in $VMS; do
                    Enabled=$(Db_isEnabled_VM $VMMGR_DB_PATH $VM)
                    if [ "$Enabled" == "1" ]; then
                        edb="enabled"
                    fi
                    systemctl --quiet is-enabled $VM 2>/dev/null
                    if [ $? -eq 0 ]; then
                       esys="enabled"
                    fi
                    Running=$(VM_Is_Running $VM)
                    if [ "$Running" == 1 ]; then
                      isrun="running"
                    fi
                    echo "$VM: $edb(DB), $esys(systemd): $isrun"
                done
            ;;
            "running")
                VMS=$(Db_List_VMs $VMMGR_DB_PATH)
                for VM in $VMS; do
                    Running=$(VM_Is_Running $VM)
                    if [ "$Running" == "1" ]; then
                        echo $VM
                    fi
                done
            ;;
            "enabled")
                Db_Filter_VMs $VMMGR_DB_PATH Enabled 1
                
            ;;
            "stopped")
                VMS=$(Db_List_VMs $VMMGR_DB_PATH)
                for VM in $VMS; do
                    Running=$(VM_Is_Running $VM)
                    if [ "$Running" == "0" ]; then
                        echo $VM
                    fi
                done
            ;;
            "disbled")
                Db_Filter_VMs $VMMGR_DB_PATH Enabled 0
            ;;
    esac
}
