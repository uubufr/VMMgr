#! /bin/bash
#
# script name: VMMgr_Functions
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.04
# description: All usefull functions
#
# Functions:
# Check_Softwares: try to check if all required software are installed
# Check_System: Check system requirements
# Check_MEM: Check if MEM and MAXMEM, if MAXMEM is undefined, calculate MEM * 2
# Set_NetDev: Create tap interfaces
# Set_IPMI: Create IPMI device, using OpenIPMI-lanserv 
# Custom_VM_Config: Customize VM Configuration
#
# Create_Tap: Create Tap iface
# Create_Bridge: create bridge dispatcher
# Enslave_Tap: enslave Tap to a bridge
# Set_Iface_Net: Add IP to an iface
#
# Get_Bridge_Tool: Try to detect best bridge tool available


## TODO:
## Créer des units systemd
## créer les fichiers spice
## créer un tableau de numa
# créer un tableau de périphériques disque



# Function Check_Softwares
# Description: try to check if all required software are installed
# Args: no args
function Check_Softwares() {
    qemu-system_x86_64
    openIPMI_lanserv
    sqlite3
}

# Function: Check_System
# Description: Check system requirements
# Args: no args
# Steps:
#   1: Check module vhost-net
#   2: Check perms on /dev/net/tun, /dev/vhost-net and /dev/kvm
#   3: Set cap_net_admin on qemu-system_x86_64
function Check_System() {
    if [ "$(sudo modinfo vhost-net -F intree)" != "Y" ]; then
        sudo modprobe vhost vhost-net
    fi
    
    ls -l /dev/net/tun | cut -d\  -f1 | grep 'crw-rw-rw-' > /dev/null
    if [ $? -ne 0 ]; then
        sudo chmod 0666 /dev/net/tun
    fi

    ls -l /dev/vhost-net | cut -d\  -f1 | grep 'crw-rw-rw-' > /dev/null
    if [ $? -ne 0 ]; then
        sudo chmod 0666 /dev/vhost-net
    fi

    ls -l /dev/kvm | cut -d\  -f1 | grep 'crw-rw-rw-' > /dev/null
    if [ $? -ne 0 ]; then
        sudo chmod 0666 /dev/kvm
    fi

    sudo getcap /usr/bin/qemu-system-x86_64 | grep cap_net_admin+ep > /dev/null
    if [ $? -ne 0 ]; then
        sudo setcap cap_net_admin+ep /usr/bin/qemu-system-x86_64
    fi
    
    # On a besoin de voir comment faire dans sudo pour que ça fonctionne
    #if [ $(cat /proc/sys/net/ipv4/ip_forward) -eq 0 ]; then
        #sudo echo 1 > /proc/sys/net/ipv4/ip_forward
    #fi
    
    modinfo openvswitch 2>/dev/null 1>/dev/null
    if [ $? -eq 0 ]; then
        sudo modprobe openvswitch
        [ -d /var/run/openvswitch ] || sudo mkdir /var/run/openvswitch
    fi
}


# Function Check_MEM
# Description: Check if MEM and MAXMEM
# if MAXMEM is undefined, calculate MEM * 2
# Args:
#   $1: $MEM
#   $2: $MAXMEM
function Check_MEM() {
 if [ "$1" ]; then
  if [ "$2" ]; then
   echo $2
  else
   MAXMEM=$(( $1 * 2 ))
   MAXSYS=$(( $(grep "MemTotal: " /proc/meminfo  | awk '{print $2}' ) / 1024 / 1024 ))
   if [ $MAXMEM -gt $MAXSYS ]; then $MAXMEM == $MAXSYS; fi
   echo $MAXMEM
  fi
 else
   return 0
 fi
}

# Function: Set_NetDev
# Description: Create tap interfaces
# Args:
#   $1: Bridge name
#   $2: Number of tap devices
#   $3: tapupdown file path
# Return an array of netdev declarations
function Set_NedDev() {
    for NETNUMBER in $(seq $(( ${#NETDEV[@]} + 1 )) $(( ${#NETDEV[@]} + $2 )) ); do
        NETDEV[$NETNUMBER]="-netdev type=tap,id=virtio-tap$NETNUMBER,script=$3/tapup-$1,downscript=$3/tapdown-$1,vhost=on -device virtio-net-pci,netdev=virtio-tap$NETNUMBER,mac=$(Set_MAC $NETNUMBER),id=drive-virtio-tap$NETNUMBER,csum=off,gso=off,guest_tso4=off,guest_tso6=off,guest_ecn=off"
    done
}

# Function: Set_IPMI
# Description: Create IPMI device, using OpenIPMI-lanserv 
# Args:
#   $1: Vm Name
#   $2: IPMI Template Path
#   $3: IPMI Address
#   $4: IPMI Port
function Set_IPMI() {
  if [ ! -f /etc/ipmi/$2.conf ]; then
    cp $2 /etc/ipmi/$1.conf
    sed -i "s/%%IPMIADDR%%/$3/" /etc/ipmi/$1.conf
    sed -i "s/%%IPMIPORT%%/$4/" /etc/ipmi/$1.conf
    sed -i "s/%%NAME%%/$1/g" /etc/ipmi/$1.conf
  fi
}

# Function : Check_Existing_VM
# Description: Check on DB if VM already exists
# Args:
#   $1: VM Name
function Check_Existing_VM() {
 Set_Db $VMMGR_DB_PATH
 Db_Get_VM_Config $VMMGR_DB_PATH $1
}

# Function: Custom_VM_Config
# Description: Customize VM Configuration
# Args:
#   $1: VM name
#   $2: VM config path
function Custom_VM_Config() {
    sed -i "s/%%NAME%%/$1/g" $2
}

# Function: Start_VM_From_Config
# Description: Start VM using VM Config file
# Args:
#   $1: VM Name
#   $2: VM config path
function Start_VM_From_Config() {
    	echo "starting $2"
    . $2

    . VMMgr_Vars
    
    . $2
	echo "on a lu la conf, on a donc: "
	echo $QEMU_TEMPLATE
	echo $FAB
    qemu-system-x86_64 $QEMU_TEMPLATE
    # enregistrer SPICE, TELNET, QMP, VNC
}

# Function: Set_Service_Listen
# Description: Set IP and Port for Spice
# Args:
#   $1: IP or Iface name
#   $2: $IPVER
#   $3: Iface type
# Steps:
#   1) is $1 an IP?
#   2)  yes: is IP already exist? yes -> return $1; no create iface and set ip 
#   3)  no: is existing iface? yes -> return first IP; no; create iface and set IP
function Set_Service_Listen() {
    # Première chose: on récupère l'ip:port depuis la db.
    # Ensuite si on a rien, on vérifie
    ipcalc -$2 $1 2>/dev/null 1>/dev/null
    if [ $? -eq 0 ]; then
        echo "IP valide"
        ip -$2 -br address show | grep $1 2>/dev/null 1>/dev/null
        if [ $? -eq 0 ]; then
            echo $1
        else
            echo "ip inexistante"

        fi
    else
        echo "Not an IP"
        case "$3" in
                "tap")
                    IFACE=$(ip -br address show type tun | grep $1 | head -1 | awk '{print $1}')
                    if [ "$IFACE" == "" ]; then
                        echo "not tun"
                    else
                        echo "yes tun $IFACE"
                    fi
                ;;
                "bridge")
                    IFACE=$(ip -br address show type bridge | grep $1 | head -1 | awk '{print $1}')
                    if [ "$IFACE" == "" ]; then
                        echo "not bridge"
                    else
                        echo "yes bridge: $IFACE"
                    fi
                ;;
                "tap2br")
                    echo "tap2br"
                    IFACE=$(ip -br address show type tun | grep $1 | head -1 | awk '{print $1}')
                    if [ "$IFACE" == "" ]; then
                        echo "not tun"
                    else
                        echo "yes tun $IFACE"
                    fi
                ;;
        esac
    fi
}            

function Is_Valid_IP() {
    NET="-4"
    [ "$IPMODE" == "ipv6" ] && NET="-6"
    ipcalc $NET $1 2>/dev/null 1>/dev/null
    if [ $? -eq 0 ]; then 
        echo "0"
    else
        echo "1"
    fi
}

function Is_Existing_IP() {
    NET="-4"
    [ "$IPMODE" == "ipv6" ] && NET="-6"
    ip $NET -br address show | grep $1 2>/dev/null 1>/dev/null
    if [ $? -eq 0 ]; then 
        echo "0"
    else
        echo "1"
    fi
}

function Is_Existing_Bridge() {
    ip -br address show type bridge $1 2>/dev/null 1>/dev/null
    if [ $? -eq 0 ]; then 
        echo "0"
    else
        echo "1"
    fi
}

# Function: Create_New_Network
# Description: Declare New Network in DB
# Args:
#   $1: Iface Name
#   $2: Network IP
#   $3: Prefix
#   $4: First IP available -1
#   $5: Last IP available
#   $6: Type (bridge or tap)
function Create_New_Network() {
    Db_Create_Network $VMMGR_DB_PATH $2 $3 $4 $5 $1
}
