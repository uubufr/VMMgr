#! /bin/bash
#
# script name: VMMgr_CPUs
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.02
# description: CPU/SMP/NUMA/MACHINE functions
#
# Functions:
# Get_Nb_Sockets: Get Number of Physical CPU
# Get_Total_CPUs: Get all cpus on the system
# Get_Core_Number: Get Core list on a physical cpu
# Get_Core_Threads: return threads on a core
# Get_Core_Id: Get corresponding core ID
# Map_SMP_1CPU: map the first physical CPU
# Set_Custom_SMP: Generate custom -smp config
# Set_NUMA_NODE: Generate Numa defs

# Function: Get_Nb_Sockets
# Description: Get Number of Physical CPU
# Args: none
function Get_Nb_Sockets() {
    for cpu in $(ls -1d /sys/devices/system/cpu/cpu[0-9]*); do
        cat $cpu/topology/physical_package_id
    done
}

# Function: Get_Total_CPUs
# Description: Get all cpus on the system
# Args: none
function Get_Total_CPUs() {
    ls -1d /sys/devices/system/cpu/cpu[0-9]* | wc -l
}


# Function: Get_Core_Number
# Description: Get Core list on a physical cpu
# Args:
#   $1: Physical ID
function Get_Core_Number() {
    for cpu in $(ls -1d /sys/devices/system/cpu/cpu[0-9]*); do
        if [ "$(cat $cpu/topology/physical_package_id)" == $1 ]; then
            cat $cpu/topology/core_id
        fi
    done
}

# Function: Get_Core_Threads
# Description: return threads on a core
# Args:
#   $1: cpu number
function Get_Core_Threads() {
    cat /sys/devices/system/cpu/cpu$1/topology/thread_siblings_list
}

# Function: Get_Core_Id
# Description: Get corresponding core ID
# Args:
#   $1: cpu number
function Get_Core_Id() {
    cat /sys/devices/system/cpu/cpu$1/topology/core_id
}

# Function: Map_SMP_1CPU
# Descrition: map the first physical CPU
# Args:
#   $1: Initial cpus for start vm
#   $2: (bool) Nb of Numa nodes
function Map_SMP_1CPU() {
    NBSOCKETS=$(Get_Nb_Sockets | sort | uniq | wc -l)
    SOCKETCORES=$(Get_Core_Number 0 | sort | uniq | wc -l)
    CORETHREADS=$(Get_Core_Threads 0)
    if [ "$CORETHREADS" == "${CORETHREADS##*,}" ] && [ "$CORETHREADS" == "${CORETHREADS##*-}" ] ; then
        HYPERTHREAD=1
    else
        HYPERTHREAD=2
    fi
    SMP=$(echo "-smp ${1:-1},cores=$SOCKETCORES,threads=$HYPERTHREAD,sockets=1,maxcpus=$(( $SOCKETCORES * $HYPERTHREAD * $NBSOCKETS ))")
    if [ "$2" == "" ] || [ "$2" == "off" ]; then
        SMP="$SMP $(Set_NUMA_NODE 1)"
    elif [ "$2" == "on" ]; then
        SMP="$SMP $(Set_NUMA_NODE $SOCKETCORES)"
    fi
    echo $SMP
}

# Function: Set_Custom_SMP
# Desrciption: Generate custom -smp config
#   $1: number of cores
#   $2: nomber of sockets
#   $3: Initial cpus for start vm
#   $4: (bool) Nb of Numa nodes
function Set_Custom_SMP() {
    CORETHREADS=$(Get_Core_Threads 0)
    if [ "$CORETHREADS" == "${CORETHREADS##*,}" ]; then
        HYPERTHREAD=1
    else
        HYPERTHREAD=2
    fi
    MAXCPUS=$(( $1 * $HYPERTHREAD * $2 ))
    SMP=$(echo "-smp ${3:-$MAXCPUS},cores=$1,threads=$HYPERTHREAD,sockets=$2,maxcpus=$MAXCPUS")
    if [ "$4" == "" ] || [ "$4" == "off" ]; then
        SMP="$SMP $(Set_NUMA_NODE 1)"
    elif [ "$4" == "on" ]; then
        SMP="$SMP $(Set_NUMA_NODE $1)"
    fi
    echo $SMP
}

# Function: Set_NUMA_NODE
# Description: Generate Numa defs
# Args:
#   $1: Nb of Numa nodes
#   $2: RAM SIZE in GB
### TODO:
### 1) on récupère la quantité de ram
### 2) en divise la RAM par numa et on déclare des memory-backend-ram
function Set_NUMA_NODE() {
    MEMNB=$(( $2 / $1 ))
    if [ "$1" == "1" ]; then
        echo "-object memory-backend-ram,id=ram0,size=2G,merge=on,dump=off,prealloc=no -numa node,nodeid=0,memdev=ram0 -numa cpu,node-id=0,socket-id=0"
    else
        NUMANODES=""
        MEMDEVS=""
        for i in $(seq 0 $(( $1 - 1)) ); do
            MEMDEVS="$MEMDEVS -object memory-backend-ram,id=ram$i,size=2G,merge=on,dump=off,prealloc=no"
            NUMANODES="$NUMANODES $(echo "-numa node,nodeid=$i,memdev=ram$i")"
        done
        for i in $(seq 0 $(( $1 - 1 )) ); do
            NUMANODES="$NUMANODES $(echo "-numa cpu,node-id=$i,socket-id=0,core-id=$i ")"
        done
        echo $MEMDEVS $NUMANODES
    fi
}
